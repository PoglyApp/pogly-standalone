// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
import {
  AlgebraicType as __AlgebraicTypeValue,
  BinaryReader as __BinaryReader,
  BinaryWriter as __BinaryWriter,
  ClientCache as __ClientCache,
  ConnectionId as __ConnectionId,
  DbConnectionBuilder as __DbConnectionBuilder,
  DbConnectionImpl as __DbConnectionImpl,
  Identity as __Identity,
  SubscriptionBuilderImpl as __SubscriptionBuilderImpl,
  TableCache as __TableCache,
  TimeDuration as __TimeDuration,
  Timestamp as __Timestamp,
  deepEqual as __deepEqual,
  type AlgebraicType as __AlgebraicTypeType,
  type AlgebraicTypeVariants as __AlgebraicTypeVariants,
  type CallReducerFlags as __CallReducerFlags,
  type ErrorContextInterface as __ErrorContextInterface,
  type Event as __Event,
  type EventContextInterface as __EventContextInterface,
  type ReducerEventContextInterface as __ReducerEventContextInterface,
  type SubscriptionEventContextInterface as __SubscriptionEventContextInterface,
  type TableHandle as __TableHandle,
} from "spacetimedb";
import { ElementDataChange } from "./element_data_change_type";
// Mark import as potentially unused
declare type __keep_ElementDataChange = ElementDataChange;
import { ElementChange } from "./element_change_type";
// Mark import as potentially unused
declare type __keep_ElementChange = ElementChange;
import { GuestChange } from "./guest_change_type";
// Mark import as potentially unused
declare type __keep_GuestChange = GuestChange;
import { EmptyChange } from "./empty_change_type";
// Mark import as potentially unused
declare type __keep_EmptyChange = EmptyChange;
import { ChatMessage } from "./chat_message_type";
// Mark import as potentially unused
declare type __keep_ChatMessage = ChatMessage;

import * as ChangeStructVariants from './change_struct_variants'

// The tagged union or sum type for the algebraic type `ChangeStruct`.
export type ChangeStruct = ChangeStructVariants.ElementDataChange |
  ChangeStructVariants.ElementChange |
  ChangeStructVariants.GuestChange |
  ChangeStructVariants.EmptyChange |
  ChangeStructVariants.ChatMessage;

let _cached_ChangeStruct_type_value: __AlgebraicTypeType | null = null;

// A value with helper functions to construct the type.
export const ChangeStruct = {
  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  ElementDataChange: (value: ElementDataChange): ChangeStructVariants.ElementDataChange => ({ tag: "ElementDataChange", value }),
  ElementChange: (value: ElementChange): ChangeStructVariants.ElementChange => ({ tag: "ElementChange", value }),
  GuestChange: (value: GuestChange): ChangeStructVariants.GuestChange => ({ tag: "GuestChange", value }),
  EmptyChange: (value: EmptyChange): ChangeStructVariants.EmptyChange => ({ tag: "EmptyChange", value }),
  ChatMessage: (value: ChatMessage): ChangeStructVariants.ChatMessage => ({ tag: "ChatMessage", value }),

  getTypeScriptAlgebraicType(): __AlgebraicTypeType {
    if (_cached_ChangeStruct_type_value) return _cached_ChangeStruct_type_value;
    _cached_ChangeStruct_type_value = __AlgebraicTypeValue.Sum({ variants: [] });
    _cached_ChangeStruct_type_value.value.variants.push(
      { name: "ElementDataChange", algebraicType: ElementDataChange.getTypeScriptAlgebraicType() },
      { name: "ElementChange", algebraicType: ElementChange.getTypeScriptAlgebraicType() },
      { name: "GuestChange", algebraicType: GuestChange.getTypeScriptAlgebraicType() },
      { name: "EmptyChange", algebraicType: EmptyChange.getTypeScriptAlgebraicType() },
      { name: "ChatMessage", algebraicType: ChatMessage.getTypeScriptAlgebraicType() },
    );
    return _cached_ChangeStruct_type_value;
  },

  serialize(writer: __BinaryWriter, value: ChangeStruct): void {
      __AlgebraicTypeValue.serializeValue(writer, ChangeStruct.getTypeScriptAlgebraicType(), value);
  },

  deserialize(reader: __BinaryReader): ChangeStruct {
      return __AlgebraicTypeValue.deserializeValue(reader, ChangeStruct.getTypeScriptAlgebraicType());
  },

}

export default ChangeStruct;


