// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

import {
  // @ts-ignore
  Address,
  // @ts-ignore
  AlgebraicType,
  // @ts-ignore
  AlgebraicValue,
  // @ts-ignore
  BinaryReader,
  // @ts-ignore
  BinaryWriter,
  // @ts-ignore
  CallReducerFlags,
  // @ts-ignore
  DBConnectionBuilder,
  // @ts-ignore
  DBConnectionImpl,
  // @ts-ignore
  DBContext,
  // @ts-ignore
  Event,
  // @ts-ignore
  EventContextInterface,
  // @ts-ignore
  Identity,
  // @ts-ignore
  ProductType,
  // @ts-ignore
  ProductTypeElement,
  // @ts-ignore
  SumType,
  // @ts-ignore
  SumTypeVariant,
  // @ts-ignore
  TableCache,
  // @ts-ignore
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

export type SetConfig = {
  platform: string,
  channel: string,
  debug: boolean,
  updateHz: number,
  editorBorder: number,
  authentication: boolean,
  strictMode: boolean,
  authKey: string,
};

/**
 * A namespace for generated helper functions.
 */
export namespace SetConfig {
  /**
  * A function which returns this type represented as an AlgebraicType.
  * This function is derived from the AlgebraicType used to generate this type.
  */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createProductType([
      new ProductTypeElement("platform", AlgebraicType.createStringType()),
      new ProductTypeElement("channel", AlgebraicType.createStringType()),
      new ProductTypeElement("debug", AlgebraicType.createBoolType()),
      new ProductTypeElement("updateHz", AlgebraicType.createU32Type()),
      new ProductTypeElement("editorBorder", AlgebraicType.createU32Type()),
      new ProductTypeElement("authentication", AlgebraicType.createBoolType()),
      new ProductTypeElement("strictMode", AlgebraicType.createBoolType()),
      new ProductTypeElement("authKey", AlgebraicType.createStringType()),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: SetConfig): void {
    SetConfig.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): SetConfig {
    return SetConfig.getTypeScriptAlgebraicType().deserialize(reader);
  }

}

