// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

import {
  // @ts-ignore
  Address,
  // @ts-ignore
  AlgebraicType,
  // @ts-ignore
  AlgebraicValue,
  // @ts-ignore
  BinaryReader,
  // @ts-ignore
  BinaryWriter,
  // @ts-ignore
  CallReducerFlags,
  // @ts-ignore
  DBConnectionBuilder,
  // @ts-ignore
  DBConnectionImpl,
  // @ts-ignore
  DBContext,
  // @ts-ignore
  Event,
  // @ts-ignore
  EventContextInterface,
  // @ts-ignore
  Identity,
  // @ts-ignore
  ProductType,
  // @ts-ignore
  ProductTypeElement,
  // @ts-ignore
  SumType,
  // @ts-ignore
  SumTypeVariant,
  // @ts-ignore
  TableCache,
  // @ts-ignore
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";
// @ts-ignore
import { DataType as __DataType } from "./data_type_type";

export type ElementData = {
  id: number,
  name: string,
  dataType: __DataType,
  data: string,
  byteArray: Uint8Array | undefined,
  dataWidth: number,
  dataHeight: number,
  createdBy: string,
};

/**
 * A namespace for generated helper functions.
 */
export namespace ElementData {
  /**
  * A function which returns this type represented as an AlgebraicType.
  * This function is derived from the AlgebraicType used to generate this type.
  */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createProductType([
      new ProductTypeElement("id", AlgebraicType.createU32Type()),
      new ProductTypeElement("name", AlgebraicType.createStringType()),
      new ProductTypeElement("dataType", __DataType.getTypeScriptAlgebraicType()),
      new ProductTypeElement("data", AlgebraicType.createStringType()),
      new ProductTypeElement("byteArray", AlgebraicType.createOptionType(AlgebraicType.createArrayType(AlgebraicType.createU8Type()))),
      new ProductTypeElement("dataWidth", AlgebraicType.createI32Type()),
      new ProductTypeElement("dataHeight", AlgebraicType.createI32Type()),
      new ProductTypeElement("createdBy", AlgebraicType.createStringType()),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: ElementData): void {
    ElementData.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): ElementData {
    return ElementData.getTypeScriptAlgebraicType().deserialize(reader);
  }

}


