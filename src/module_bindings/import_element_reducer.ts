// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

import {
  // @ts-ignore
  Address,
  // @ts-ignore
  AlgebraicType,
  // @ts-ignore
  AlgebraicValue,
  // @ts-ignore
  BinaryReader,
  // @ts-ignore
  BinaryWriter,
  // @ts-ignore
  CallReducerFlags,
  // @ts-ignore
  DBConnectionBuilder,
  // @ts-ignore
  DBConnectionImpl,
  // @ts-ignore
  DBContext,
  // @ts-ignore
  Event,
  // @ts-ignore
  EventContextInterface,
  // @ts-ignore
  Identity,
  // @ts-ignore
  ProductType,
  // @ts-ignore
  ProductTypeElement,
  // @ts-ignore
  SumType,
  // @ts-ignore
  SumTypeVariant,
  // @ts-ignore
  TableCache,
  // @ts-ignore
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// @ts-ignore
import { ElementStruct as __ElementStruct } from "./element_struct_type";

export type ImportElement = {
  element: __ElementStruct,
  transparency: number,
  transform: string,
  clip: string,
  layoutId: number,
  placedBy: string,
  lastEditedBy: string,
  zindex: number,
  folderId: number | undefined,
};

/**
 * A namespace for generated helper functions.
 */
export namespace ImportElement {
  /**
  * A function which returns this type represented as an AlgebraicType.
  * This function is derived from the AlgebraicType used to generate this type.
  */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createProductType([
      new ProductTypeElement("element", __ElementStruct.getTypeScriptAlgebraicType()),
      new ProductTypeElement("transparency", AlgebraicType.createI32Type()),
      new ProductTypeElement("transform", AlgebraicType.createStringType()),
      new ProductTypeElement("clip", AlgebraicType.createStringType()),
      new ProductTypeElement("layoutId", AlgebraicType.createU32Type()),
      new ProductTypeElement("placedBy", AlgebraicType.createStringType()),
      new ProductTypeElement("lastEditedBy", AlgebraicType.createStringType()),
      new ProductTypeElement("zindex", AlgebraicType.createI32Type()),
      new ProductTypeElement("folderId", AlgebraicType.createOptionType(AlgebraicType.createU32Type())),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: ImportElement): void {
    ImportElement.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): ImportElement {
    return ImportElement.getTypeScriptAlgebraicType().deserialize(reader);
  }

}

