// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

import {
  // @ts-ignore
  Address,
  // @ts-ignore
  AlgebraicType,
  // @ts-ignore
  AlgebraicValue,
  // @ts-ignore
  BinaryReader,
  // @ts-ignore
  BinaryWriter,
  // @ts-ignore
  CallReducerFlags,
  // @ts-ignore
  DBConnectionBuilder,
  // @ts-ignore
  DBConnectionImpl,
  // @ts-ignore
  DBContext,
  // @ts-ignore
  Event,
  // @ts-ignore
  EventContextInterface,
  // @ts-ignore
  Identity,
  // @ts-ignore
  ProductType,
  // @ts-ignore
  ProductTypeElement,
  // @ts-ignore
  SumType,
  // @ts-ignore
  SumTypeVariant,
  // @ts-ignore
  TableCache,
  // @ts-ignore
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";
// @ts-ignore
import { ChangeStruct as __ChangeStruct } from "./change_struct_type";

export type AuditLog = {
  id: number,
  unixTime: bigint,
  identity: Identity,
  nickname: string,
  reducer: string,
  oldChange: __ChangeStruct,
  newChange: __ChangeStruct,
};

/**
 * A namespace for generated helper functions.
 */
export namespace AuditLog {
  /**
  * A function which returns this type represented as an AlgebraicType.
  * This function is derived from the AlgebraicType used to generate this type.
  */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createProductType([
      new ProductTypeElement("id", AlgebraicType.createU32Type()),
      new ProductTypeElement("unixTime", AlgebraicType.createI64Type()),
      new ProductTypeElement("identity", AlgebraicType.createIdentityType()),
      new ProductTypeElement("nickname", AlgebraicType.createStringType()),
      new ProductTypeElement("reducer", AlgebraicType.createStringType()),
      new ProductTypeElement("oldChange", __ChangeStruct.getTypeScriptAlgebraicType()),
      new ProductTypeElement("newChange", __ChangeStruct.getTypeScriptAlgebraicType()),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: AuditLog): void {
    AuditLog.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): AuditLog {
    return AuditLog.getTypeScriptAlgebraicType().deserialize(reader);
  }

}


