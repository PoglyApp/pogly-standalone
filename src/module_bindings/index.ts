// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { AddElement } from "./add_element_reducer.ts";
export { AddElement };
import { AddElementData } from "./add_element_data_reducer.ts";
export { AddElementData };
import { AddElementDataArray } from "./add_element_data_array_reducer.ts";
export { AddElementDataArray };
import { AddElementDataArrayWithId } from "./add_element_data_array_with_id_reducer.ts";
export { AddElementDataArrayWithId };
import { AddElementDataWithId } from "./add_element_data_with_id_reducer.ts";
export { AddElementDataWithId };
import { AddElementToLayout } from "./add_element_to_layout_reducer.ts";
export { AddElementToLayout };
import { AddFolder } from "./add_folder_reducer.ts";
export { AddFolder };
import { AddLayout } from "./add_layout_reducer.ts";
export { AddLayout };
import { AddLayoutWithId } from "./add_layout_with_id_reducer.ts";
export { AddLayoutWithId };
import { Authenticate } from "./authenticate_reducer.ts";
export { Authenticate };
import { ClearIdentityPermission } from "./clear_identity_permission_reducer.ts";
export { ClearIdentityPermission };
import { CompleteOverlayCommand } from "./complete_overlay_command_reducer.ts";
export { CompleteOverlayCommand };
import { Connect } from "./connect_reducer.ts";
export { Connect };
import { DeleteAllElementData } from "./delete_all_element_data_reducer.ts";
export { DeleteAllElementData };
import { DeleteAllElements } from "./delete_all_elements_reducer.ts";
export { DeleteAllElements };
import { DeleteAllFolders } from "./delete_all_folders_reducer.ts";
export { DeleteAllFolders };
import { DeleteAllLayouts } from "./delete_all_layouts_reducer.ts";
export { DeleteAllLayouts };
import { DeleteElement } from "./delete_element_reducer.ts";
export { DeleteElement };
import { DeleteElementDataById } from "./delete_element_data_by_id_reducer.ts";
export { DeleteElementDataById };
import { DeleteElementDataByName } from "./delete_element_data_by_name_reducer.ts";
export { DeleteElementDataByName };
import { DeleteFolder } from "./delete_folder_reducer.ts";
export { DeleteFolder };
import { DeleteLayout } from "./delete_layout_reducer.ts";
export { DeleteLayout };
import { DuplicateLayout } from "./duplicate_layout_reducer.ts";
export { DuplicateLayout };
import { GuestConnected } from "./guest_connected_reducer.ts";
export { GuestConnected };
import { GuestDisconnected } from "./guest_disconnected_reducer.ts";
export { GuestDisconnected };
import { ImportConfig } from "./import_config_reducer.ts";
export { ImportConfig };
import { ImportElement } from "./import_element_reducer.ts";
export { ImportElement };
import { ImportElementData } from "./import_element_data_reducer.ts";
export { ImportElementData };
import { ImportLayout } from "./import_layout_reducer.ts";
export { ImportLayout };
import { ImportPermission } from "./import_permission_reducer.ts";
export { ImportPermission };
import { IssueOverlayCommand } from "./issue_overlay_command_reducer.ts";
export { IssueOverlayCommand };
import { KeepAlive } from "./keep_alive_reducer.ts";
export { KeepAlive };
import { KickGuest } from "./kick_guest_reducer.ts";
export { KickGuest };
import { KickSelf } from "./kick_self_reducer.ts";
export { KickSelf };
import { PingHeartbeat } from "./ping_heartbeat_reducer.ts";
export { PingHeartbeat };
import { SendMessage } from "./send_message_reducer.ts";
export { SendMessage };
import { SetConfig } from "./set_config_reducer.ts";
export { SetConfig };
import { SetIdentityPermission } from "./set_identity_permission_reducer.ts";
export { SetIdentityPermission };
import { SetIdentityPermissionEditor } from "./set_identity_permission_editor_reducer.ts";
export { SetIdentityPermissionEditor };
import { SetIdentityPermissionEditorByName } from "./set_identity_permission_editor_by_name_reducer.ts";
export { SetIdentityPermissionEditorByName };
import { SetIdentityPermissionModerator } from "./set_identity_permission_moderator_reducer.ts";
export { SetIdentityPermissionModerator };
import { SetIdentityPermissionModeratorByName } from "./set_identity_permission_moderator_by_name_reducer.ts";
export { SetIdentityPermissionModeratorByName };
import { SetLayoutActive } from "./set_layout_active_reducer.ts";
export { SetLayoutActive };
import { UpdateAuthenticationKey } from "./update_authentication_key_reducer.ts";
export { UpdateAuthenticationKey };
import { UpdateConfig } from "./update_config_reducer.ts";
export { UpdateConfig };
import { UpdateEditorGuidelines } from "./update_editor_guidelines_reducer.ts";
export { UpdateEditorGuidelines };
import { UpdateElement } from "./update_element_reducer.ts";
export { UpdateElement };
import { UpdateElementClip } from "./update_element_clip_reducer.ts";
export { UpdateElementClip };
import { UpdateElementData } from "./update_element_data_reducer.ts";
export { UpdateElementData };
import { UpdateElementDataData } from "./update_element_data_data_reducer.ts";
export { UpdateElementDataData };
import { UpdateElementDataName } from "./update_element_data_name_reducer.ts";
export { UpdateElementDataName };
import { UpdateElementDataSize } from "./update_element_data_size_reducer.ts";
export { UpdateElementDataSize };
import { UpdateElementFolder } from "./update_element_folder_reducer.ts";
export { UpdateElementFolder };
import { UpdateElementLayout } from "./update_element_layout_reducer.ts";
export { UpdateElementLayout };
import { UpdateElementLocked } from "./update_element_locked_reducer.ts";
export { UpdateElementLocked };
import { UpdateElementStruct } from "./update_element_struct_reducer.ts";
export { UpdateElementStruct };
import { UpdateElementTransform } from "./update_element_transform_reducer.ts";
export { UpdateElementTransform };
import { UpdateElementTransparency } from "./update_element_transparency_reducer.ts";
export { UpdateElementTransparency };
import { UpdateFolderIcon } from "./update_folder_icon_reducer.ts";
export { UpdateFolderIcon };
import { UpdateFolderName } from "./update_folder_name_reducer.ts";
export { UpdateFolderName };
import { UpdateGuest } from "./update_guest_reducer.ts";
export { UpdateGuest };
import { UpdateGuestNickname } from "./update_guest_nickname_reducer.ts";
export { UpdateGuestNickname };
import { UpdateGuestPosition } from "./update_guest_position_reducer.ts";
export { UpdateGuestPosition };
import { UpdateGuestSelectedElement } from "./update_guest_selected_element_reducer.ts";
export { UpdateGuestSelectedElement };
import { UpdateGuestSelectedLayout } from "./update_guest_selected_layout_reducer.ts";
export { UpdateGuestSelectedLayout };
import { UpdateImageElementDataStruct } from "./update_image_element_data_struct_reducer.ts";
export { UpdateImageElementDataStruct };
import { UpdateImageElementHeight } from "./update_image_element_height_reducer.ts";
export { UpdateImageElementHeight };
import { UpdateImageElementSize } from "./update_image_element_size_reducer.ts";
export { UpdateImageElementSize };
import { UpdateImageElementWidth } from "./update_image_element_width_reducer.ts";
export { UpdateImageElementWidth };
import { UpdateLayoutName } from "./update_layout_name_reducer.ts";
export { UpdateLayoutName };
import { UpdateTextElementColor } from "./update_text_element_color_reducer.ts";
export { UpdateTextElementColor };
import { UpdateTextElementFont } from "./update_text_element_font_reducer.ts";
export { UpdateTextElementFont };
import { UpdateTextElementShadow } from "./update_text_element_shadow_reducer.ts";
export { UpdateTextElementShadow };
import { UpdateTextElementSize } from "./update_text_element_size_reducer.ts";
export { UpdateTextElementSize };
import { UpdateTextElementText } from "./update_text_element_text_reducer.ts";
export { UpdateTextElementText };
import { UpdateWidgetElementDataId } from "./update_widget_element_data_id_reducer.ts";
export { UpdateWidgetElementDataId };
import { UpdateWidgetElementHeight } from "./update_widget_element_height_reducer.ts";
export { UpdateWidgetElementHeight };
import { UpdateWidgetElementRawData } from "./update_widget_element_raw_data_reducer.ts";
export { UpdateWidgetElementRawData };
import { UpdateWidgetElementSize } from "./update_widget_element_size_reducer.ts";
export { UpdateWidgetElementSize };
import { UpdateWidgetElementWidth } from "./update_widget_element_width_reducer.ts";
export { UpdateWidgetElementWidth };

// Import and reexport all table handle types
import { AuditLogTableHandle } from "./audit_log_table.ts";
export { AuditLogTableHandle };
import { AuthenticationKeyTableHandle } from "./authentication_key_table.ts";
export { AuthenticationKeyTableHandle };
import { ConfigTableHandle } from "./config_table.ts";
export { ConfigTableHandle };
import { ElementDataTableHandle } from "./element_data_table.ts";
export { ElementDataTableHandle };
import { ElementsTableHandle } from "./elements_table.ts";
export { ElementsTableHandle };
import { FoldersTableHandle } from "./folders_table.ts";
export { FoldersTableHandle };
import { GuestsTableHandle } from "./guests_table.ts";
export { GuestsTableHandle };
import { HeartbeatTableHandle } from "./heartbeat_table.ts";
export { HeartbeatTableHandle };
import { KeepAliveWorkerTableHandle } from "./keep_alive_worker_table.ts";
export { KeepAliveWorkerTableHandle };
import { LayoutsTableHandle } from "./layouts_table.ts";
export { LayoutsTableHandle };
import { OverlayCommandTableHandle } from "./overlay_command_table.ts";
export { OverlayCommandTableHandle };
import { PermissionsTableHandle } from "./permissions_table.ts";
export { PermissionsTableHandle };
import { ZIndexTableHandle } from "./z_index_table.ts";
export { ZIndexTableHandle };

// Import and reexport all types
import { AuditLog } from "./audit_log_type.ts";
export { AuditLog };
import { AuthenticationKey } from "./authentication_key_type.ts";
export { AuthenticationKey };
import { ChangeStruct } from "./change_struct_type.ts";
export { ChangeStruct };
import { ChatMessage } from "./chat_message_type.ts";
export { ChatMessage };
import { CommandType } from "./command_type_type.ts";
export { CommandType };
import { Config } from "./config_type.ts";
export { Config };
import { DataType } from "./data_type_type.ts";
export { DataType };
import { ElementChange } from "./element_change_type.ts";
export { ElementChange };
import { ElementData } from "./element_data_type.ts";
export { ElementData };
import { ElementDataChange } from "./element_data_change_type.ts";
export { ElementDataChange };
import { ElementStruct } from "./element_struct_type.ts";
export { ElementStruct };
import { Elements } from "./elements_type.ts";
export { Elements };
import { EmptyChange } from "./empty_change_type.ts";
export { EmptyChange };
import { Folders } from "./folders_type.ts";
export { Folders };
import { GuestChange } from "./guest_change_type.ts";
export { GuestChange };
import { Guests } from "./guests_type.ts";
export { Guests };
import { Heartbeat } from "./heartbeat_type.ts";
export { Heartbeat };
import { ImageElement } from "./image_element_type.ts";
export { ImageElement };
import { ImageElementData } from "./image_element_data_type.ts";
export { ImageElementData };
import { KeepAliveWorker } from "./keep_alive_worker_type.ts";
export { KeepAliveWorker };
import { Layouts } from "./layouts_type.ts";
export { Layouts };
import { OverlayCommand } from "./overlay_command_type.ts";
export { OverlayCommand };
import { PermissionLevel } from "./permission_level_type.ts";
export { PermissionLevel };
import { Permissions } from "./permissions_type.ts";
export { Permissions };
import { TextElement } from "./text_element_type.ts";
export { TextElement };
import { WidgetElement } from "./widget_element_type.ts";
export { WidgetElement };
import { ZIndex } from "./z_index_type.ts";
export { ZIndex };

const REMOTE_MODULE = {
  tables: {
    AuditLog: {
      tableName: "AuditLog",
      rowType: AuditLog.getTypeScriptAlgebraicType(),
      primaryKey: "Id",
    },
    AuthenticationKey: {
      tableName: "AuthenticationKey",
      rowType: AuthenticationKey.getTypeScriptAlgebraicType(),
      primaryKey: "Version",
    },
    Config: {
      tableName: "Config",
      rowType: Config.getTypeScriptAlgebraicType(),
      primaryKey: "Version",
    },
    ElementData: {
      tableName: "ElementData",
      rowType: ElementData.getTypeScriptAlgebraicType(),
      primaryKey: "Id",
    },
    Elements: {
      tableName: "Elements",
      rowType: Elements.getTypeScriptAlgebraicType(),
      primaryKey: "Id",
    },
    Folders: {
      tableName: "Folders",
      rowType: Folders.getTypeScriptAlgebraicType(),
      primaryKey: "Id",
    },
    Guests: {
      tableName: "Guests",
      rowType: Guests.getTypeScriptAlgebraicType(),
      primaryKey: "Address",
    },
    Heartbeat: {
      tableName: "Heartbeat",
      rowType: Heartbeat.getTypeScriptAlgebraicType(),
      primaryKey: "Id",
    },
    KeepAliveWorker: {
      tableName: "KeepAliveWorker",
      rowType: KeepAliveWorker.getTypeScriptAlgebraicType(),
      primaryKey: "Id",
    },
    Layouts: {
      tableName: "Layouts",
      rowType: Layouts.getTypeScriptAlgebraicType(),
      primaryKey: "Id",
    },
    OverlayCommand: {
      tableName: "OverlayCommand",
      rowType: OverlayCommand.getTypeScriptAlgebraicType(),
      primaryKey: "Id",
    },
    Permissions: {
      tableName: "Permissions",
      rowType: Permissions.getTypeScriptAlgebraicType(),
      primaryKey: "Identity",
    },
    ZIndex: {
      tableName: "ZIndex",
      rowType: ZIndex.getTypeScriptAlgebraicType(),
      primaryKey: "Version",
    },
  },
  reducers: {
    AddElement: {
      reducerName: "AddElement",
      argsType: AddElement.getTypeScriptAlgebraicType(),
    },
    AddElementData: {
      reducerName: "AddElementData",
      argsType: AddElementData.getTypeScriptAlgebraicType(),
    },
    AddElementDataArray: {
      reducerName: "AddElementDataArray",
      argsType: AddElementDataArray.getTypeScriptAlgebraicType(),
    },
    AddElementDataArrayWithId: {
      reducerName: "AddElementDataArrayWithId",
      argsType: AddElementDataArrayWithId.getTypeScriptAlgebraicType(),
    },
    AddElementDataWithId: {
      reducerName: "AddElementDataWithId",
      argsType: AddElementDataWithId.getTypeScriptAlgebraicType(),
    },
    AddElementToLayout: {
      reducerName: "AddElementToLayout",
      argsType: AddElementToLayout.getTypeScriptAlgebraicType(),
    },
    AddFolder: {
      reducerName: "AddFolder",
      argsType: AddFolder.getTypeScriptAlgebraicType(),
    },
    AddLayout: {
      reducerName: "AddLayout",
      argsType: AddLayout.getTypeScriptAlgebraicType(),
    },
    AddLayoutWithId: {
      reducerName: "AddLayoutWithId",
      argsType: AddLayoutWithId.getTypeScriptAlgebraicType(),
    },
    Authenticate: {
      reducerName: "Authenticate",
      argsType: Authenticate.getTypeScriptAlgebraicType(),
    },
    ClearIdentityPermission: {
      reducerName: "ClearIdentityPermission",
      argsType: ClearIdentityPermission.getTypeScriptAlgebraicType(),
    },
    CompleteOverlayCommand: {
      reducerName: "CompleteOverlayCommand",
      argsType: CompleteOverlayCommand.getTypeScriptAlgebraicType(),
    },
    Connect: {
      reducerName: "Connect",
      argsType: Connect.getTypeScriptAlgebraicType(),
    },
    DeleteAllElementData: {
      reducerName: "DeleteAllElementData",
      argsType: DeleteAllElementData.getTypeScriptAlgebraicType(),
    },
    DeleteAllElements: {
      reducerName: "DeleteAllElements",
      argsType: DeleteAllElements.getTypeScriptAlgebraicType(),
    },
    DeleteAllFolders: {
      reducerName: "DeleteAllFolders",
      argsType: DeleteAllFolders.getTypeScriptAlgebraicType(),
    },
    DeleteAllLayouts: {
      reducerName: "DeleteAllLayouts",
      argsType: DeleteAllLayouts.getTypeScriptAlgebraicType(),
    },
    DeleteElement: {
      reducerName: "DeleteElement",
      argsType: DeleteElement.getTypeScriptAlgebraicType(),
    },
    DeleteElementDataById: {
      reducerName: "DeleteElementDataById",
      argsType: DeleteElementDataById.getTypeScriptAlgebraicType(),
    },
    DeleteElementDataByName: {
      reducerName: "DeleteElementDataByName",
      argsType: DeleteElementDataByName.getTypeScriptAlgebraicType(),
    },
    DeleteFolder: {
      reducerName: "DeleteFolder",
      argsType: DeleteFolder.getTypeScriptAlgebraicType(),
    },
    DeleteLayout: {
      reducerName: "DeleteLayout",
      argsType: DeleteLayout.getTypeScriptAlgebraicType(),
    },
    DuplicateLayout: {
      reducerName: "DuplicateLayout",
      argsType: DuplicateLayout.getTypeScriptAlgebraicType(),
    },
    GuestConnected: {
      reducerName: "GuestConnected",
      argsType: GuestConnected.getTypeScriptAlgebraicType(),
    },
    GuestDisconnected: {
      reducerName: "GuestDisconnected",
      argsType: GuestDisconnected.getTypeScriptAlgebraicType(),
    },
    ImportConfig: {
      reducerName: "ImportConfig",
      argsType: ImportConfig.getTypeScriptAlgebraicType(),
    },
    ImportElement: {
      reducerName: "ImportElement",
      argsType: ImportElement.getTypeScriptAlgebraicType(),
    },
    ImportElementData: {
      reducerName: "ImportElementData",
      argsType: ImportElementData.getTypeScriptAlgebraicType(),
    },
    ImportLayout: {
      reducerName: "ImportLayout",
      argsType: ImportLayout.getTypeScriptAlgebraicType(),
    },
    ImportPermission: {
      reducerName: "ImportPermission",
      argsType: ImportPermission.getTypeScriptAlgebraicType(),
    },
    IssueOverlayCommand: {
      reducerName: "IssueOverlayCommand",
      argsType: IssueOverlayCommand.getTypeScriptAlgebraicType(),
    },
    KeepAlive: {
      reducerName: "KeepAlive",
      argsType: KeepAlive.getTypeScriptAlgebraicType(),
    },
    KickGuest: {
      reducerName: "KickGuest",
      argsType: KickGuest.getTypeScriptAlgebraicType(),
    },
    KickSelf: {
      reducerName: "KickSelf",
      argsType: KickSelf.getTypeScriptAlgebraicType(),
    },
    PingHeartbeat: {
      reducerName: "PingHeartbeat",
      argsType: PingHeartbeat.getTypeScriptAlgebraicType(),
    },
    SendMessage: {
      reducerName: "SendMessage",
      argsType: SendMessage.getTypeScriptAlgebraicType(),
    },
    SetConfig: {
      reducerName: "SetConfig",
      argsType: SetConfig.getTypeScriptAlgebraicType(),
    },
    SetIdentityPermission: {
      reducerName: "SetIdentityPermission",
      argsType: SetIdentityPermission.getTypeScriptAlgebraicType(),
    },
    SetIdentityPermissionEditor: {
      reducerName: "SetIdentityPermissionEditor",
      argsType: SetIdentityPermissionEditor.getTypeScriptAlgebraicType(),
    },
    SetIdentityPermissionEditorByName: {
      reducerName: "SetIdentityPermissionEditorByName",
      argsType: SetIdentityPermissionEditorByName.getTypeScriptAlgebraicType(),
    },
    SetIdentityPermissionModerator: {
      reducerName: "SetIdentityPermissionModerator",
      argsType: SetIdentityPermissionModerator.getTypeScriptAlgebraicType(),
    },
    SetIdentityPermissionModeratorByName: {
      reducerName: "SetIdentityPermissionModeratorByName",
      argsType: SetIdentityPermissionModeratorByName.getTypeScriptAlgebraicType(),
    },
    SetLayoutActive: {
      reducerName: "SetLayoutActive",
      argsType: SetLayoutActive.getTypeScriptAlgebraicType(),
    },
    UpdateAuthenticationKey: {
      reducerName: "UpdateAuthenticationKey",
      argsType: UpdateAuthenticationKey.getTypeScriptAlgebraicType(),
    },
    UpdateConfig: {
      reducerName: "UpdateConfig",
      argsType: UpdateConfig.getTypeScriptAlgebraicType(),
    },
    UpdateEditorGuidelines: {
      reducerName: "UpdateEditorGuidelines",
      argsType: UpdateEditorGuidelines.getTypeScriptAlgebraicType(),
    },
    UpdateElement: {
      reducerName: "UpdateElement",
      argsType: UpdateElement.getTypeScriptAlgebraicType(),
    },
    UpdateElementClip: {
      reducerName: "UpdateElementClip",
      argsType: UpdateElementClip.getTypeScriptAlgebraicType(),
    },
    UpdateElementData: {
      reducerName: "UpdateElementData",
      argsType: UpdateElementData.getTypeScriptAlgebraicType(),
    },
    UpdateElementDataData: {
      reducerName: "UpdateElementDataData",
      argsType: UpdateElementDataData.getTypeScriptAlgebraicType(),
    },
    UpdateElementDataName: {
      reducerName: "UpdateElementDataName",
      argsType: UpdateElementDataName.getTypeScriptAlgebraicType(),
    },
    UpdateElementDataSize: {
      reducerName: "UpdateElementDataSize",
      argsType: UpdateElementDataSize.getTypeScriptAlgebraicType(),
    },
    UpdateElementFolder: {
      reducerName: "UpdateElementFolder",
      argsType: UpdateElementFolder.getTypeScriptAlgebraicType(),
    },
    UpdateElementLayout: {
      reducerName: "UpdateElementLayout",
      argsType: UpdateElementLayout.getTypeScriptAlgebraicType(),
    },
    UpdateElementLocked: {
      reducerName: "UpdateElementLocked",
      argsType: UpdateElementLocked.getTypeScriptAlgebraicType(),
    },
    UpdateElementStruct: {
      reducerName: "UpdateElementStruct",
      argsType: UpdateElementStruct.getTypeScriptAlgebraicType(),
    },
    UpdateElementTransform: {
      reducerName: "UpdateElementTransform",
      argsType: UpdateElementTransform.getTypeScriptAlgebraicType(),
    },
    UpdateElementTransparency: {
      reducerName: "UpdateElementTransparency",
      argsType: UpdateElementTransparency.getTypeScriptAlgebraicType(),
    },
    UpdateFolderIcon: {
      reducerName: "UpdateFolderIcon",
      argsType: UpdateFolderIcon.getTypeScriptAlgebraicType(),
    },
    UpdateFolderName: {
      reducerName: "UpdateFolderName",
      argsType: UpdateFolderName.getTypeScriptAlgebraicType(),
    },
    UpdateGuest: {
      reducerName: "UpdateGuest",
      argsType: UpdateGuest.getTypeScriptAlgebraicType(),
    },
    UpdateGuestNickname: {
      reducerName: "UpdateGuestNickname",
      argsType: UpdateGuestNickname.getTypeScriptAlgebraicType(),
    },
    UpdateGuestPosition: {
      reducerName: "UpdateGuestPosition",
      argsType: UpdateGuestPosition.getTypeScriptAlgebraicType(),
    },
    UpdateGuestSelectedElement: {
      reducerName: "UpdateGuestSelectedElement",
      argsType: UpdateGuestSelectedElement.getTypeScriptAlgebraicType(),
    },
    UpdateGuestSelectedLayout: {
      reducerName: "UpdateGuestSelectedLayout",
      argsType: UpdateGuestSelectedLayout.getTypeScriptAlgebraicType(),
    },
    UpdateImageElementDataStruct: {
      reducerName: "UpdateImageElementDataStruct",
      argsType: UpdateImageElementDataStruct.getTypeScriptAlgebraicType(),
    },
    UpdateImageElementHeight: {
      reducerName: "UpdateImageElementHeight",
      argsType: UpdateImageElementHeight.getTypeScriptAlgebraicType(),
    },
    UpdateImageElementSize: {
      reducerName: "UpdateImageElementSize",
      argsType: UpdateImageElementSize.getTypeScriptAlgebraicType(),
    },
    UpdateImageElementWidth: {
      reducerName: "UpdateImageElementWidth",
      argsType: UpdateImageElementWidth.getTypeScriptAlgebraicType(),
    },
    UpdateLayoutName: {
      reducerName: "UpdateLayoutName",
      argsType: UpdateLayoutName.getTypeScriptAlgebraicType(),
    },
    UpdateTextElementColor: {
      reducerName: "UpdateTextElementColor",
      argsType: UpdateTextElementColor.getTypeScriptAlgebraicType(),
    },
    UpdateTextElementFont: {
      reducerName: "UpdateTextElementFont",
      argsType: UpdateTextElementFont.getTypeScriptAlgebraicType(),
    },
    UpdateTextElementShadow: {
      reducerName: "UpdateTextElementShadow",
      argsType: UpdateTextElementShadow.getTypeScriptAlgebraicType(),
    },
    UpdateTextElementSize: {
      reducerName: "UpdateTextElementSize",
      argsType: UpdateTextElementSize.getTypeScriptAlgebraicType(),
    },
    UpdateTextElementText: {
      reducerName: "UpdateTextElementText",
      argsType: UpdateTextElementText.getTypeScriptAlgebraicType(),
    },
    UpdateWidgetElementDataId: {
      reducerName: "UpdateWidgetElementDataId",
      argsType: UpdateWidgetElementDataId.getTypeScriptAlgebraicType(),
    },
    UpdateWidgetElementHeight: {
      reducerName: "UpdateWidgetElementHeight",
      argsType: UpdateWidgetElementHeight.getTypeScriptAlgebraicType(),
    },
    UpdateWidgetElementRawData: {
      reducerName: "UpdateWidgetElementRawData",
      argsType: UpdateWidgetElementRawData.getTypeScriptAlgebraicType(),
    },
    UpdateWidgetElementSize: {
      reducerName: "UpdateWidgetElementSize",
      argsType: UpdateWidgetElementSize.getTypeScriptAlgebraicType(),
    },
    UpdateWidgetElementWidth: {
      reducerName: "UpdateWidgetElementWidth",
      argsType: UpdateWidgetElementWidth.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "AddElement", args: AddElement }
| { name: "AddElementData", args: AddElementData }
| { name: "AddElementDataArray", args: AddElementDataArray }
| { name: "AddElementDataArrayWithId", args: AddElementDataArrayWithId }
| { name: "AddElementDataWithId", args: AddElementDataWithId }
| { name: "AddElementToLayout", args: AddElementToLayout }
| { name: "AddFolder", args: AddFolder }
| { name: "AddLayout", args: AddLayout }
| { name: "AddLayoutWithId", args: AddLayoutWithId }
| { name: "Authenticate", args: Authenticate }
| { name: "ClearIdentityPermission", args: ClearIdentityPermission }
| { name: "CompleteOverlayCommand", args: CompleteOverlayCommand }
| { name: "Connect", args: Connect }
| { name: "DeleteAllElementData", args: DeleteAllElementData }
| { name: "DeleteAllElements", args: DeleteAllElements }
| { name: "DeleteAllFolders", args: DeleteAllFolders }
| { name: "DeleteAllLayouts", args: DeleteAllLayouts }
| { name: "DeleteElement", args: DeleteElement }
| { name: "DeleteElementDataById", args: DeleteElementDataById }
| { name: "DeleteElementDataByName", args: DeleteElementDataByName }
| { name: "DeleteFolder", args: DeleteFolder }
| { name: "DeleteLayout", args: DeleteLayout }
| { name: "DuplicateLayout", args: DuplicateLayout }
| { name: "GuestConnected", args: GuestConnected }
| { name: "GuestDisconnected", args: GuestDisconnected }
| { name: "ImportConfig", args: ImportConfig }
| { name: "ImportElement", args: ImportElement }
| { name: "ImportElementData", args: ImportElementData }
| { name: "ImportLayout", args: ImportLayout }
| { name: "ImportPermission", args: ImportPermission }
| { name: "IssueOverlayCommand", args: IssueOverlayCommand }
| { name: "KeepAlive", args: KeepAlive }
| { name: "KickGuest", args: KickGuest }
| { name: "KickSelf", args: KickSelf }
| { name: "PingHeartbeat", args: PingHeartbeat }
| { name: "SendMessage", args: SendMessage }
| { name: "SetConfig", args: SetConfig }
| { name: "SetIdentityPermission", args: SetIdentityPermission }
| { name: "SetIdentityPermissionEditor", args: SetIdentityPermissionEditor }
| { name: "SetIdentityPermissionEditorByName", args: SetIdentityPermissionEditorByName }
| { name: "SetIdentityPermissionModerator", args: SetIdentityPermissionModerator }
| { name: "SetIdentityPermissionModeratorByName", args: SetIdentityPermissionModeratorByName }
| { name: "SetLayoutActive", args: SetLayoutActive }
| { name: "UpdateAuthenticationKey", args: UpdateAuthenticationKey }
| { name: "UpdateConfig", args: UpdateConfig }
| { name: "UpdateEditorGuidelines", args: UpdateEditorGuidelines }
| { name: "UpdateElement", args: UpdateElement }
| { name: "UpdateElementClip", args: UpdateElementClip }
| { name: "UpdateElementData", args: UpdateElementData }
| { name: "UpdateElementDataData", args: UpdateElementDataData }
| { name: "UpdateElementDataName", args: UpdateElementDataName }
| { name: "UpdateElementDataSize", args: UpdateElementDataSize }
| { name: "UpdateElementFolder", args: UpdateElementFolder }
| { name: "UpdateElementLayout", args: UpdateElementLayout }
| { name: "UpdateElementLocked", args: UpdateElementLocked }
| { name: "UpdateElementStruct", args: UpdateElementStruct }
| { name: "UpdateElementTransform", args: UpdateElementTransform }
| { name: "UpdateElementTransparency", args: UpdateElementTransparency }
| { name: "UpdateFolderIcon", args: UpdateFolderIcon }
| { name: "UpdateFolderName", args: UpdateFolderName }
| { name: "UpdateGuest", args: UpdateGuest }
| { name: "UpdateGuestNickname", args: UpdateGuestNickname }
| { name: "UpdateGuestPosition", args: UpdateGuestPosition }
| { name: "UpdateGuestSelectedElement", args: UpdateGuestSelectedElement }
| { name: "UpdateGuestSelectedLayout", args: UpdateGuestSelectedLayout }
| { name: "UpdateImageElementDataStruct", args: UpdateImageElementDataStruct }
| { name: "UpdateImageElementHeight", args: UpdateImageElementHeight }
| { name: "UpdateImageElementSize", args: UpdateImageElementSize }
| { name: "UpdateImageElementWidth", args: UpdateImageElementWidth }
| { name: "UpdateLayoutName", args: UpdateLayoutName }
| { name: "UpdateTextElementColor", args: UpdateTextElementColor }
| { name: "UpdateTextElementFont", args: UpdateTextElementFont }
| { name: "UpdateTextElementShadow", args: UpdateTextElementShadow }
| { name: "UpdateTextElementSize", args: UpdateTextElementSize }
| { name: "UpdateTextElementText", args: UpdateTextElementText }
| { name: "UpdateWidgetElementDataId", args: UpdateWidgetElementDataId }
| { name: "UpdateWidgetElementHeight", args: UpdateWidgetElementHeight }
| { name: "UpdateWidgetElementRawData", args: UpdateWidgetElementRawData }
| { name: "UpdateWidgetElementSize", args: UpdateWidgetElementSize }
| { name: "UpdateWidgetElementWidth", args: UpdateWidgetElementWidth }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  addElement(element: ElementStruct, transparency: number, transform: string, clip: string, folderId: number | undefined) {
    const __args = { element, transparency, transform, clip, folderId };
    let __writer = new BinaryWriter(1024);
    AddElement.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("AddElement", __argsBuffer, this.setCallReducerFlags.addElementFlags);
  }

  onAddElement(callback: (ctx: ReducerEventContext, element: ElementStruct, transparency: number, transform: string, clip: string, folderId: number | undefined) => void) {
    this.connection.onReducer("AddElement", callback);
  }

  removeOnAddElement(callback: (ctx: ReducerEventContext, element: ElementStruct, transparency: number, transform: string, clip: string, folderId: number | undefined) => void) {
    this.connection.offReducer("AddElement", callback);
  }

  addElementData(name: string, type: DataType, data: string, width: number, height: number) {
    const __args = { name, type, data, width, height };
    let __writer = new BinaryWriter(1024);
    AddElementData.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("AddElementData", __argsBuffer, this.setCallReducerFlags.addElementDataFlags);
  }

  onAddElementData(callback: (ctx: ReducerEventContext, name: string, type: DataType, data: string, width: number, height: number) => void) {
    this.connection.onReducer("AddElementData", callback);
  }

  removeOnAddElementData(callback: (ctx: ReducerEventContext, name: string, type: DataType, data: string, width: number, height: number) => void) {
    this.connection.offReducer("AddElementData", callback);
  }

  addElementDataArray(name: string, type: DataType, data: string, array: Uint8Array, width: number, height: number) {
    const __args = { name, type, data, array, width, height };
    let __writer = new BinaryWriter(1024);
    AddElementDataArray.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("AddElementDataArray", __argsBuffer, this.setCallReducerFlags.addElementDataArrayFlags);
  }

  onAddElementDataArray(callback: (ctx: ReducerEventContext, name: string, type: DataType, data: string, array: Uint8Array, width: number, height: number) => void) {
    this.connection.onReducer("AddElementDataArray", callback);
  }

  removeOnAddElementDataArray(callback: (ctx: ReducerEventContext, name: string, type: DataType, data: string, array: Uint8Array, width: number, height: number) => void) {
    this.connection.offReducer("AddElementDataArray", callback);
  }

  addElementDataArrayWithId(id: number, name: string, type: DataType, data: string, array: Uint8Array, width: number, height: number) {
    const __args = { id, name, type, data, array, width, height };
    let __writer = new BinaryWriter(1024);
    AddElementDataArrayWithId.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("AddElementDataArrayWithId", __argsBuffer, this.setCallReducerFlags.addElementDataArrayWithIdFlags);
  }

  onAddElementDataArrayWithId(callback: (ctx: ReducerEventContext, id: number, name: string, type: DataType, data: string, array: Uint8Array, width: number, height: number) => void) {
    this.connection.onReducer("AddElementDataArrayWithId", callback);
  }

  removeOnAddElementDataArrayWithId(callback: (ctx: ReducerEventContext, id: number, name: string, type: DataType, data: string, array: Uint8Array, width: number, height: number) => void) {
    this.connection.offReducer("AddElementDataArrayWithId", callback);
  }

  addElementDataWithId(id: number, name: string, type: DataType, data: string, width: number, height: number) {
    const __args = { id, name, type, data, width, height };
    let __writer = new BinaryWriter(1024);
    AddElementDataWithId.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("AddElementDataWithId", __argsBuffer, this.setCallReducerFlags.addElementDataWithIdFlags);
  }

  onAddElementDataWithId(callback: (ctx: ReducerEventContext, id: number, name: string, type: DataType, data: string, width: number, height: number) => void) {
    this.connection.onReducer("AddElementDataWithId", callback);
  }

  removeOnAddElementDataWithId(callback: (ctx: ReducerEventContext, id: number, name: string, type: DataType, data: string, width: number, height: number) => void) {
    this.connection.offReducer("AddElementDataWithId", callback);
  }

  addElementToLayout(element: ElementStruct, transparency: number, transform: string, clip: string, layoutId: number, folderId: number | undefined) {
    const __args = { element, transparency, transform, clip, layoutId, folderId };
    let __writer = new BinaryWriter(1024);
    AddElementToLayout.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("AddElementToLayout", __argsBuffer, this.setCallReducerFlags.addElementToLayoutFlags);
  }

  onAddElementToLayout(callback: (ctx: ReducerEventContext, element: ElementStruct, transparency: number, transform: string, clip: string, layoutId: number, folderId: number | undefined) => void) {
    this.connection.onReducer("AddElementToLayout", callback);
  }

  removeOnAddElementToLayout(callback: (ctx: ReducerEventContext, element: ElementStruct, transparency: number, transform: string, clip: string, layoutId: number, folderId: number | undefined) => void) {
    this.connection.offReducer("AddElementToLayout", callback);
  }

  addFolder(name: string, icon: string) {
    const __args = { name, icon };
    let __writer = new BinaryWriter(1024);
    AddFolder.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("AddFolder", __argsBuffer, this.setCallReducerFlags.addFolderFlags);
  }

  onAddFolder(callback: (ctx: ReducerEventContext, name: string, icon: string) => void) {
    this.connection.onReducer("AddFolder", callback);
  }

  removeOnAddFolder(callback: (ctx: ReducerEventContext, name: string, icon: string) => void) {
    this.connection.offReducer("AddFolder", callback);
  }

  addLayout(name: string, active: boolean) {
    const __args = { name, active };
    let __writer = new BinaryWriter(1024);
    AddLayout.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("AddLayout", __argsBuffer, this.setCallReducerFlags.addLayoutFlags);
  }

  onAddLayout(callback: (ctx: ReducerEventContext, name: string, active: boolean) => void) {
    this.connection.onReducer("AddLayout", callback);
  }

  removeOnAddLayout(callback: (ctx: ReducerEventContext, name: string, active: boolean) => void) {
    this.connection.offReducer("AddLayout", callback);
  }

  addLayoutWithId(id: number, name: string, active: boolean) {
    const __args = { id, name, active };
    let __writer = new BinaryWriter(1024);
    AddLayoutWithId.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("AddLayoutWithId", __argsBuffer, this.setCallReducerFlags.addLayoutWithIdFlags);
  }

  onAddLayoutWithId(callback: (ctx: ReducerEventContext, id: number, name: string, active: boolean) => void) {
    this.connection.onReducer("AddLayoutWithId", callback);
  }

  removeOnAddLayoutWithId(callback: (ctx: ReducerEventContext, id: number, name: string, active: boolean) => void) {
    this.connection.offReducer("AddLayoutWithId", callback);
  }

  authenticate(key: string) {
    const __args = { key };
    let __writer = new BinaryWriter(1024);
    Authenticate.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("Authenticate", __argsBuffer, this.setCallReducerFlags.authenticateFlags);
  }

  onAuthenticate(callback: (ctx: ReducerEventContext, key: string) => void) {
    this.connection.onReducer("Authenticate", callback);
  }

  removeOnAuthenticate(callback: (ctx: ReducerEventContext, key: string) => void) {
    this.connection.offReducer("Authenticate", callback);
  }

  clearIdentityPermission(identity: Identity) {
    const __args = { identity };
    let __writer = new BinaryWriter(1024);
    ClearIdentityPermission.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("ClearIdentityPermission", __argsBuffer, this.setCallReducerFlags.clearIdentityPermissionFlags);
  }

  onClearIdentityPermission(callback: (ctx: ReducerEventContext, identity: Identity) => void) {
    this.connection.onReducer("ClearIdentityPermission", callback);
  }

  removeOnClearIdentityPermission(callback: (ctx: ReducerEventContext, identity: Identity) => void) {
    this.connection.offReducer("ClearIdentityPermission", callback);
  }

  completeOverlayCommand(commandId: number) {
    const __args = { commandId };
    let __writer = new BinaryWriter(1024);
    CompleteOverlayCommand.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("CompleteOverlayCommand", __argsBuffer, this.setCallReducerFlags.completeOverlayCommandFlags);
  }

  onCompleteOverlayCommand(callback: (ctx: ReducerEventContext, commandId: number) => void) {
    this.connection.onReducer("CompleteOverlayCommand", callback);
  }

  removeOnCompleteOverlayCommand(callback: (ctx: ReducerEventContext, commandId: number) => void) {
    this.connection.offReducer("CompleteOverlayCommand", callback);
  }

  connect() {
    this.connection.callReducer("Connect", new Uint8Array(0), this.setCallReducerFlags.connectFlags);
  }

  onConnect(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("Connect", callback);
  }

  removeOnConnect(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("Connect", callback);
  }

  deleteAllElementData() {
    this.connection.callReducer("DeleteAllElementData", new Uint8Array(0), this.setCallReducerFlags.deleteAllElementDataFlags);
  }

  onDeleteAllElementData(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("DeleteAllElementData", callback);
  }

  removeOnDeleteAllElementData(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("DeleteAllElementData", callback);
  }

  deleteAllElements() {
    this.connection.callReducer("DeleteAllElements", new Uint8Array(0), this.setCallReducerFlags.deleteAllElementsFlags);
  }

  onDeleteAllElements(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("DeleteAllElements", callback);
  }

  removeOnDeleteAllElements(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("DeleteAllElements", callback);
  }

  deleteAllFolders(preserveElements: boolean) {
    const __args = { preserveElements };
    let __writer = new BinaryWriter(1024);
    DeleteAllFolders.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("DeleteAllFolders", __argsBuffer, this.setCallReducerFlags.deleteAllFoldersFlags);
  }

  onDeleteAllFolders(callback: (ctx: ReducerEventContext, preserveElements: boolean) => void) {
    this.connection.onReducer("DeleteAllFolders", callback);
  }

  removeOnDeleteAllFolders(callback: (ctx: ReducerEventContext, preserveElements: boolean) => void) {
    this.connection.offReducer("DeleteAllFolders", callback);
  }

  deleteAllLayouts(preserveElements: boolean) {
    const __args = { preserveElements };
    let __writer = new BinaryWriter(1024);
    DeleteAllLayouts.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("DeleteAllLayouts", __argsBuffer, this.setCallReducerFlags.deleteAllLayoutsFlags);
  }

  onDeleteAllLayouts(callback: (ctx: ReducerEventContext, preserveElements: boolean) => void) {
    this.connection.onReducer("DeleteAllLayouts", callback);
  }

  removeOnDeleteAllLayouts(callback: (ctx: ReducerEventContext, preserveElements: boolean) => void) {
    this.connection.offReducer("DeleteAllLayouts", callback);
  }

  deleteElement(elementId: number) {
    const __args = { elementId };
    let __writer = new BinaryWriter(1024);
    DeleteElement.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("DeleteElement", __argsBuffer, this.setCallReducerFlags.deleteElementFlags);
  }

  onDeleteElement(callback: (ctx: ReducerEventContext, elementId: number) => void) {
    this.connection.onReducer("DeleteElement", callback);
  }

  removeOnDeleteElement(callback: (ctx: ReducerEventContext, elementId: number) => void) {
    this.connection.offReducer("DeleteElement", callback);
  }

  deleteElementDataById(id: number) {
    const __args = { id };
    let __writer = new BinaryWriter(1024);
    DeleteElementDataById.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("DeleteElementDataById", __argsBuffer, this.setCallReducerFlags.deleteElementDataByIdFlags);
  }

  onDeleteElementDataById(callback: (ctx: ReducerEventContext, id: number) => void) {
    this.connection.onReducer("DeleteElementDataById", callback);
  }

  removeOnDeleteElementDataById(callback: (ctx: ReducerEventContext, id: number) => void) {
    this.connection.offReducer("DeleteElementDataById", callback);
  }

  deleteElementDataByName(name: string) {
    const __args = { name };
    let __writer = new BinaryWriter(1024);
    DeleteElementDataByName.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("DeleteElementDataByName", __argsBuffer, this.setCallReducerFlags.deleteElementDataByNameFlags);
  }

  onDeleteElementDataByName(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.onReducer("DeleteElementDataByName", callback);
  }

  removeOnDeleteElementDataByName(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.offReducer("DeleteElementDataByName", callback);
  }

  deleteFolder(folderId: number, preserveElements: boolean) {
    const __args = { folderId, preserveElements };
    let __writer = new BinaryWriter(1024);
    DeleteFolder.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("DeleteFolder", __argsBuffer, this.setCallReducerFlags.deleteFolderFlags);
  }

  onDeleteFolder(callback: (ctx: ReducerEventContext, folderId: number, preserveElements: boolean) => void) {
    this.connection.onReducer("DeleteFolder", callback);
  }

  removeOnDeleteFolder(callback: (ctx: ReducerEventContext, folderId: number, preserveElements: boolean) => void) {
    this.connection.offReducer("DeleteFolder", callback);
  }

  deleteLayout(layoutId: number, preserveElements: boolean, preserveLayoutId: number) {
    const __args = { layoutId, preserveElements, preserveLayoutId };
    let __writer = new BinaryWriter(1024);
    DeleteLayout.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("DeleteLayout", __argsBuffer, this.setCallReducerFlags.deleteLayoutFlags);
  }

  onDeleteLayout(callback: (ctx: ReducerEventContext, layoutId: number, preserveElements: boolean, preserveLayoutId: number) => void) {
    this.connection.onReducer("DeleteLayout", callback);
  }

  removeOnDeleteLayout(callback: (ctx: ReducerEventContext, layoutId: number, preserveElements: boolean, preserveLayoutId: number) => void) {
    this.connection.offReducer("DeleteLayout", callback);
  }

  duplicateLayout(layoutId: number) {
    const __args = { layoutId };
    let __writer = new BinaryWriter(1024);
    DuplicateLayout.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("DuplicateLayout", __argsBuffer, this.setCallReducerFlags.duplicateLayoutFlags);
  }

  onDuplicateLayout(callback: (ctx: ReducerEventContext, layoutId: number) => void) {
    this.connection.onReducer("DuplicateLayout", callback);
  }

  removeOnDuplicateLayout(callback: (ctx: ReducerEventContext, layoutId: number) => void) {
    this.connection.offReducer("DuplicateLayout", callback);
  }

  onGuestConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("GuestConnected", callback);
  }

  removeOnGuestConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("GuestConnected", callback);
  }

  onGuestDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("GuestDisconnected", callback);
  }

  removeOnGuestDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("GuestDisconnected", callback);
  }

  importConfig(platform: string, channel: string, ownerIdentity: Identity, debug: boolean, updateHz: number, editorBorder: number, authentication: boolean, strictMode: boolean, zmin: number, zmax: number, authKey: string) {
    const __args = { platform, channel, ownerIdentity, debug, updateHz, editorBorder, authentication, strictMode, zmin, zmax, authKey };
    let __writer = new BinaryWriter(1024);
    ImportConfig.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("ImportConfig", __argsBuffer, this.setCallReducerFlags.importConfigFlags);
  }

  onImportConfig(callback: (ctx: ReducerEventContext, platform: string, channel: string, ownerIdentity: Identity, debug: boolean, updateHz: number, editorBorder: number, authentication: boolean, strictMode: boolean, zmin: number, zmax: number, authKey: string) => void) {
    this.connection.onReducer("ImportConfig", callback);
  }

  removeOnImportConfig(callback: (ctx: ReducerEventContext, platform: string, channel: string, ownerIdentity: Identity, debug: boolean, updateHz: number, editorBorder: number, authentication: boolean, strictMode: boolean, zmin: number, zmax: number, authKey: string) => void) {
    this.connection.offReducer("ImportConfig", callback);
  }

  importElement(element: ElementStruct, transparency: number, transform: string, clip: string, layoutId: number, placedBy: string, lastEditedBy: string, zindex: number, folderId: number | undefined) {
    const __args = { element, transparency, transform, clip, layoutId, placedBy, lastEditedBy, zindex, folderId };
    let __writer = new BinaryWriter(1024);
    ImportElement.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("ImportElement", __argsBuffer, this.setCallReducerFlags.importElementFlags);
  }

  onImportElement(callback: (ctx: ReducerEventContext, element: ElementStruct, transparency: number, transform: string, clip: string, layoutId: number, placedBy: string, lastEditedBy: string, zindex: number, folderId: number | undefined) => void) {
    this.connection.onReducer("ImportElement", callback);
  }

  removeOnImportElement(callback: (ctx: ReducerEventContext, element: ElementStruct, transparency: number, transform: string, clip: string, layoutId: number, placedBy: string, lastEditedBy: string, zindex: number, folderId: number | undefined) => void) {
    this.connection.offReducer("ImportElement", callback);
  }

  importElementData(id: number, name: string, type: DataType, data: string, width: number, height: number, createdBy: string) {
    const __args = { id, name, type, data, width, height, createdBy };
    let __writer = new BinaryWriter(1024);
    ImportElementData.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("ImportElementData", __argsBuffer, this.setCallReducerFlags.importElementDataFlags);
  }

  onImportElementData(callback: (ctx: ReducerEventContext, id: number, name: string, type: DataType, data: string, width: number, height: number, createdBy: string) => void) {
    this.connection.onReducer("ImportElementData", callback);
  }

  removeOnImportElementData(callback: (ctx: ReducerEventContext, id: number, name: string, type: DataType, data: string, width: number, height: number, createdBy: string) => void) {
    this.connection.offReducer("ImportElementData", callback);
  }

  importLayout(id: number, name: string, createdBy: string, active: boolean) {
    const __args = { id, name, createdBy, active };
    let __writer = new BinaryWriter(1024);
    ImportLayout.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("ImportLayout", __argsBuffer, this.setCallReducerFlags.importLayoutFlags);
  }

  onImportLayout(callback: (ctx: ReducerEventContext, id: number, name: string, createdBy: string, active: boolean) => void) {
    this.connection.onReducer("ImportLayout", callback);
  }

  removeOnImportLayout(callback: (ctx: ReducerEventContext, id: number, name: string, createdBy: string, active: boolean) => void) {
    this.connection.offReducer("ImportLayout", callback);
  }

  importPermission(identity: Identity, permissionLevel: string) {
    const __args = { identity, permissionLevel };
    let __writer = new BinaryWriter(1024);
    ImportPermission.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("ImportPermission", __argsBuffer, this.setCallReducerFlags.importPermissionFlags);
  }

  onImportPermission(callback: (ctx: ReducerEventContext, identity: Identity, permissionLevel: string) => void) {
    this.connection.onReducer("ImportPermission", callback);
  }

  removeOnImportPermission(callback: (ctx: ReducerEventContext, identity: Identity, permissionLevel: string) => void) {
    this.connection.offReducer("ImportPermission", callback);
  }

  issueOverlayCommand(command: CommandType) {
    const __args = { command };
    let __writer = new BinaryWriter(1024);
    IssueOverlayCommand.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("IssueOverlayCommand", __argsBuffer, this.setCallReducerFlags.issueOverlayCommandFlags);
  }

  onIssueOverlayCommand(callback: (ctx: ReducerEventContext, command: CommandType) => void) {
    this.connection.onReducer("IssueOverlayCommand", callback);
  }

  removeOnIssueOverlayCommand(callback: (ctx: ReducerEventContext, command: CommandType) => void) {
    this.connection.offReducer("IssueOverlayCommand", callback);
  }

  keepAlive(arg: KeepAliveWorker) {
    const __args = { arg };
    let __writer = new BinaryWriter(1024);
    KeepAlive.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("KeepAlive", __argsBuffer, this.setCallReducerFlags.keepAliveFlags);
  }

  onKeepAlive(callback: (ctx: ReducerEventContext, arg: KeepAliveWorker) => void) {
    this.connection.onReducer("KeepAlive", callback);
  }

  removeOnKeepAlive(callback: (ctx: ReducerEventContext, arg: KeepAliveWorker) => void) {
    this.connection.offReducer("KeepAlive", callback);
  }

  kickGuest(address: ConnectionId) {
    const __args = { address };
    let __writer = new BinaryWriter(1024);
    KickGuest.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("KickGuest", __argsBuffer, this.setCallReducerFlags.kickGuestFlags);
  }

  onKickGuest(callback: (ctx: ReducerEventContext, address: ConnectionId) => void) {
    this.connection.onReducer("KickGuest", callback);
  }

  removeOnKickGuest(callback: (ctx: ReducerEventContext, address: ConnectionId) => void) {
    this.connection.offReducer("KickGuest", callback);
  }

  kickSelf() {
    this.connection.callReducer("KickSelf", new Uint8Array(0), this.setCallReducerFlags.kickSelfFlags);
  }

  onKickSelf(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("KickSelf", callback);
  }

  removeOnKickSelf(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("KickSelf", callback);
  }

  pingHeartbeat() {
    this.connection.callReducer("PingHeartbeat", new Uint8Array(0), this.setCallReducerFlags.pingHeartbeatFlags);
  }

  onPingHeartbeat(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("PingHeartbeat", callback);
  }

  removeOnPingHeartbeat(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("PingHeartbeat", callback);
  }

  sendMessage(chatMessage: string) {
    const __args = { chatMessage };
    let __writer = new BinaryWriter(1024);
    SendMessage.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("SendMessage", __argsBuffer, this.setCallReducerFlags.sendMessageFlags);
  }

  onSendMessage(callback: (ctx: ReducerEventContext, chatMessage: string) => void) {
    this.connection.onReducer("SendMessage", callback);
  }

  removeOnSendMessage(callback: (ctx: ReducerEventContext, chatMessage: string) => void) {
    this.connection.offReducer("SendMessage", callback);
  }

  setConfig(platform: string, channel: string, debug: boolean, updateHz: number, editorBorder: number, authentication: boolean, strictMode: boolean, authKey: string) {
    const __args = { platform, channel, debug, updateHz, editorBorder, authentication, strictMode, authKey };
    let __writer = new BinaryWriter(1024);
    SetConfig.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("SetConfig", __argsBuffer, this.setCallReducerFlags.setConfigFlags);
  }

  onSetConfig(callback: (ctx: ReducerEventContext, platform: string, channel: string, debug: boolean, updateHz: number, editorBorder: number, authentication: boolean, strictMode: boolean, authKey: string) => void) {
    this.connection.onReducer("SetConfig", callback);
  }

  removeOnSetConfig(callback: (ctx: ReducerEventContext, platform: string, channel: string, debug: boolean, updateHz: number, editorBorder: number, authentication: boolean, strictMode: boolean, authKey: string) => void) {
    this.connection.offReducer("SetConfig", callback);
  }

  setIdentityPermission(identity: Identity, permissionLevel: PermissionLevel) {
    const __args = { identity, permissionLevel };
    let __writer = new BinaryWriter(1024);
    SetIdentityPermission.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("SetIdentityPermission", __argsBuffer, this.setCallReducerFlags.setIdentityPermissionFlags);
  }

  onSetIdentityPermission(callback: (ctx: ReducerEventContext, identity: Identity, permissionLevel: PermissionLevel) => void) {
    this.connection.onReducer("SetIdentityPermission", callback);
  }

  removeOnSetIdentityPermission(callback: (ctx: ReducerEventContext, identity: Identity, permissionLevel: PermissionLevel) => void) {
    this.connection.offReducer("SetIdentityPermission", callback);
  }

  setIdentityPermissionEditor(identity: Identity) {
    const __args = { identity };
    let __writer = new BinaryWriter(1024);
    SetIdentityPermissionEditor.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("SetIdentityPermissionEditor", __argsBuffer, this.setCallReducerFlags.setIdentityPermissionEditorFlags);
  }

  onSetIdentityPermissionEditor(callback: (ctx: ReducerEventContext, identity: Identity) => void) {
    this.connection.onReducer("SetIdentityPermissionEditor", callback);
  }

  removeOnSetIdentityPermissionEditor(callback: (ctx: ReducerEventContext, identity: Identity) => void) {
    this.connection.offReducer("SetIdentityPermissionEditor", callback);
  }

  setIdentityPermissionEditorByName(nickname: string) {
    const __args = { nickname };
    let __writer = new BinaryWriter(1024);
    SetIdentityPermissionEditorByName.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("SetIdentityPermissionEditorByName", __argsBuffer, this.setCallReducerFlags.setIdentityPermissionEditorByNameFlags);
  }

  onSetIdentityPermissionEditorByName(callback: (ctx: ReducerEventContext, nickname: string) => void) {
    this.connection.onReducer("SetIdentityPermissionEditorByName", callback);
  }

  removeOnSetIdentityPermissionEditorByName(callback: (ctx: ReducerEventContext, nickname: string) => void) {
    this.connection.offReducer("SetIdentityPermissionEditorByName", callback);
  }

  setIdentityPermissionModerator(identity: Identity) {
    const __args = { identity };
    let __writer = new BinaryWriter(1024);
    SetIdentityPermissionModerator.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("SetIdentityPermissionModerator", __argsBuffer, this.setCallReducerFlags.setIdentityPermissionModeratorFlags);
  }

  onSetIdentityPermissionModerator(callback: (ctx: ReducerEventContext, identity: Identity) => void) {
    this.connection.onReducer("SetIdentityPermissionModerator", callback);
  }

  removeOnSetIdentityPermissionModerator(callback: (ctx: ReducerEventContext, identity: Identity) => void) {
    this.connection.offReducer("SetIdentityPermissionModerator", callback);
  }

  setIdentityPermissionModeratorByName(nickname: string) {
    const __args = { nickname };
    let __writer = new BinaryWriter(1024);
    SetIdentityPermissionModeratorByName.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("SetIdentityPermissionModeratorByName", __argsBuffer, this.setCallReducerFlags.setIdentityPermissionModeratorByNameFlags);
  }

  onSetIdentityPermissionModeratorByName(callback: (ctx: ReducerEventContext, nickname: string) => void) {
    this.connection.onReducer("SetIdentityPermissionModeratorByName", callback);
  }

  removeOnSetIdentityPermissionModeratorByName(callback: (ctx: ReducerEventContext, nickname: string) => void) {
    this.connection.offReducer("SetIdentityPermissionModeratorByName", callback);
  }

  setLayoutActive(layoutId: number) {
    const __args = { layoutId };
    let __writer = new BinaryWriter(1024);
    SetLayoutActive.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("SetLayoutActive", __argsBuffer, this.setCallReducerFlags.setLayoutActiveFlags);
  }

  onSetLayoutActive(callback: (ctx: ReducerEventContext, layoutId: number) => void) {
    this.connection.onReducer("SetLayoutActive", callback);
  }

  removeOnSetLayoutActive(callback: (ctx: ReducerEventContext, layoutId: number) => void) {
    this.connection.offReducer("SetLayoutActive", callback);
  }

  updateAuthenticationKey(authenticationKey: string) {
    const __args = { authenticationKey };
    let __writer = new BinaryWriter(1024);
    UpdateAuthenticationKey.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateAuthenticationKey", __argsBuffer, this.setCallReducerFlags.updateAuthenticationKeyFlags);
  }

  onUpdateAuthenticationKey(callback: (ctx: ReducerEventContext, authenticationKey: string) => void) {
    this.connection.onReducer("UpdateAuthenticationKey", callback);
  }

  removeOnUpdateAuthenticationKey(callback: (ctx: ReducerEventContext, authenticationKey: string) => void) {
    this.connection.offReducer("UpdateAuthenticationKey", callback);
  }

  updateConfig(platform: string, channel: string, updateHz: number, authentication: boolean, strictMode: boolean) {
    const __args = { platform, channel, updateHz, authentication, strictMode };
    let __writer = new BinaryWriter(1024);
    UpdateConfig.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateConfig", __argsBuffer, this.setCallReducerFlags.updateConfigFlags);
  }

  onUpdateConfig(callback: (ctx: ReducerEventContext, platform: string, channel: string, updateHz: number, authentication: boolean, strictMode: boolean) => void) {
    this.connection.onReducer("UpdateConfig", callback);
  }

  removeOnUpdateConfig(callback: (ctx: ReducerEventContext, platform: string, channel: string, updateHz: number, authentication: boolean, strictMode: boolean) => void) {
    this.connection.offReducer("UpdateConfig", callback);
  }

  updateEditorGuidelines(guidelines: string) {
    const __args = { guidelines };
    let __writer = new BinaryWriter(1024);
    UpdateEditorGuidelines.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateEditorGuidelines", __argsBuffer, this.setCallReducerFlags.updateEditorGuidelinesFlags);
  }

  onUpdateEditorGuidelines(callback: (ctx: ReducerEventContext, guidelines: string) => void) {
    this.connection.onReducer("UpdateEditorGuidelines", callback);
  }

  removeOnUpdateEditorGuidelines(callback: (ctx: ReducerEventContext, guidelines: string) => void) {
    this.connection.offReducer("UpdateEditorGuidelines", callback);
  }

  updateElement(elementId: number, element: ElementStruct, transparency: number, transform: string, clip: string, locked: boolean) {
    const __args = { elementId, element, transparency, transform, clip, locked };
    let __writer = new BinaryWriter(1024);
    UpdateElement.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateElement", __argsBuffer, this.setCallReducerFlags.updateElementFlags);
  }

  onUpdateElement(callback: (ctx: ReducerEventContext, elementId: number, element: ElementStruct, transparency: number, transform: string, clip: string, locked: boolean) => void) {
    this.connection.onReducer("UpdateElement", callback);
  }

  removeOnUpdateElement(callback: (ctx: ReducerEventContext, elementId: number, element: ElementStruct, transparency: number, transform: string, clip: string, locked: boolean) => void) {
    this.connection.offReducer("UpdateElement", callback);
  }

  updateElementClip(elementId: number, clip: string) {
    const __args = { elementId, clip };
    let __writer = new BinaryWriter(1024);
    UpdateElementClip.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateElementClip", __argsBuffer, this.setCallReducerFlags.updateElementClipFlags);
  }

  onUpdateElementClip(callback: (ctx: ReducerEventContext, elementId: number, clip: string) => void) {
    this.connection.onReducer("UpdateElementClip", callback);
  }

  removeOnUpdateElementClip(callback: (ctx: ReducerEventContext, elementId: number, clip: string) => void) {
    this.connection.offReducer("UpdateElementClip", callback);
  }

  updateElementData(dataId: number, name: string, data: string, width: number, height: number) {
    const __args = { dataId, name, data, width, height };
    let __writer = new BinaryWriter(1024);
    UpdateElementData.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateElementData", __argsBuffer, this.setCallReducerFlags.updateElementDataFlags);
  }

  onUpdateElementData(callback: (ctx: ReducerEventContext, dataId: number, name: string, data: string, width: number, height: number) => void) {
    this.connection.onReducer("UpdateElementData", callback);
  }

  removeOnUpdateElementData(callback: (ctx: ReducerEventContext, dataId: number, name: string, data: string, width: number, height: number) => void) {
    this.connection.offReducer("UpdateElementData", callback);
  }

  updateElementDataData(dataId: number, data: string) {
    const __args = { dataId, data };
    let __writer = new BinaryWriter(1024);
    UpdateElementDataData.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateElementDataData", __argsBuffer, this.setCallReducerFlags.updateElementDataDataFlags);
  }

  onUpdateElementDataData(callback: (ctx: ReducerEventContext, dataId: number, data: string) => void) {
    this.connection.onReducer("UpdateElementDataData", callback);
  }

  removeOnUpdateElementDataData(callback: (ctx: ReducerEventContext, dataId: number, data: string) => void) {
    this.connection.offReducer("UpdateElementDataData", callback);
  }

  updateElementDataName(dataId: number, name: string) {
    const __args = { dataId, name };
    let __writer = new BinaryWriter(1024);
    UpdateElementDataName.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateElementDataName", __argsBuffer, this.setCallReducerFlags.updateElementDataNameFlags);
  }

  onUpdateElementDataName(callback: (ctx: ReducerEventContext, dataId: number, name: string) => void) {
    this.connection.onReducer("UpdateElementDataName", callback);
  }

  removeOnUpdateElementDataName(callback: (ctx: ReducerEventContext, dataId: number, name: string) => void) {
    this.connection.offReducer("UpdateElementDataName", callback);
  }

  updateElementDataSize(dataId: number, width: number, height: number) {
    const __args = { dataId, width, height };
    let __writer = new BinaryWriter(1024);
    UpdateElementDataSize.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateElementDataSize", __argsBuffer, this.setCallReducerFlags.updateElementDataSizeFlags);
  }

  onUpdateElementDataSize(callback: (ctx: ReducerEventContext, dataId: number, width: number, height: number) => void) {
    this.connection.onReducer("UpdateElementDataSize", callback);
  }

  removeOnUpdateElementDataSize(callback: (ctx: ReducerEventContext, dataId: number, width: number, height: number) => void) {
    this.connection.offReducer("UpdateElementDataSize", callback);
  }

  updateElementFolder(elementId: number, folderId: number | undefined) {
    const __args = { elementId, folderId };
    let __writer = new BinaryWriter(1024);
    UpdateElementFolder.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateElementFolder", __argsBuffer, this.setCallReducerFlags.updateElementFolderFlags);
  }

  onUpdateElementFolder(callback: (ctx: ReducerEventContext, elementId: number, folderId: number | undefined) => void) {
    this.connection.onReducer("UpdateElementFolder", callback);
  }

  removeOnUpdateElementFolder(callback: (ctx: ReducerEventContext, elementId: number, folderId: number | undefined) => void) {
    this.connection.offReducer("UpdateElementFolder", callback);
  }

  updateElementLayout(elementId: number, layoutId: number) {
    const __args = { elementId, layoutId };
    let __writer = new BinaryWriter(1024);
    UpdateElementLayout.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateElementLayout", __argsBuffer, this.setCallReducerFlags.updateElementLayoutFlags);
  }

  onUpdateElementLayout(callback: (ctx: ReducerEventContext, elementId: number, layoutId: number) => void) {
    this.connection.onReducer("UpdateElementLayout", callback);
  }

  removeOnUpdateElementLayout(callback: (ctx: ReducerEventContext, elementId: number, layoutId: number) => void) {
    this.connection.offReducer("UpdateElementLayout", callback);
  }

  updateElementLocked(elementId: number, locked: boolean) {
    const __args = { elementId, locked };
    let __writer = new BinaryWriter(1024);
    UpdateElementLocked.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateElementLocked", __argsBuffer, this.setCallReducerFlags.updateElementLockedFlags);
  }

  onUpdateElementLocked(callback: (ctx: ReducerEventContext, elementId: number, locked: boolean) => void) {
    this.connection.onReducer("UpdateElementLocked", callback);
  }

  removeOnUpdateElementLocked(callback: (ctx: ReducerEventContext, elementId: number, locked: boolean) => void) {
    this.connection.offReducer("UpdateElementLocked", callback);
  }

  updateElementStruct(elementId: number, elementStruct: ElementStruct) {
    const __args = { elementId, elementStruct };
    let __writer = new BinaryWriter(1024);
    UpdateElementStruct.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateElementStruct", __argsBuffer, this.setCallReducerFlags.updateElementStructFlags);
  }

  onUpdateElementStruct(callback: (ctx: ReducerEventContext, elementId: number, elementStruct: ElementStruct) => void) {
    this.connection.onReducer("UpdateElementStruct", callback);
  }

  removeOnUpdateElementStruct(callback: (ctx: ReducerEventContext, elementId: number, elementStruct: ElementStruct) => void) {
    this.connection.offReducer("UpdateElementStruct", callback);
  }

  updateElementTransform(elementId: number, transform: string) {
    const __args = { elementId, transform };
    let __writer = new BinaryWriter(1024);
    UpdateElementTransform.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateElementTransform", __argsBuffer, this.setCallReducerFlags.updateElementTransformFlags);
  }

  onUpdateElementTransform(callback: (ctx: ReducerEventContext, elementId: number, transform: string) => void) {
    this.connection.onReducer("UpdateElementTransform", callback);
  }

  removeOnUpdateElementTransform(callback: (ctx: ReducerEventContext, elementId: number, transform: string) => void) {
    this.connection.offReducer("UpdateElementTransform", callback);
  }

  updateElementTransparency(elementId: number, transparency: number) {
    const __args = { elementId, transparency };
    let __writer = new BinaryWriter(1024);
    UpdateElementTransparency.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateElementTransparency", __argsBuffer, this.setCallReducerFlags.updateElementTransparencyFlags);
  }

  onUpdateElementTransparency(callback: (ctx: ReducerEventContext, elementId: number, transparency: number) => void) {
    this.connection.onReducer("UpdateElementTransparency", callback);
  }

  removeOnUpdateElementTransparency(callback: (ctx: ReducerEventContext, elementId: number, transparency: number) => void) {
    this.connection.offReducer("UpdateElementTransparency", callback);
  }

  updateFolderIcon(folderId: number, icon: string) {
    const __args = { folderId, icon };
    let __writer = new BinaryWriter(1024);
    UpdateFolderIcon.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateFolderIcon", __argsBuffer, this.setCallReducerFlags.updateFolderIconFlags);
  }

  onUpdateFolderIcon(callback: (ctx: ReducerEventContext, folderId: number, icon: string) => void) {
    this.connection.onReducer("UpdateFolderIcon", callback);
  }

  removeOnUpdateFolderIcon(callback: (ctx: ReducerEventContext, folderId: number, icon: string) => void) {
    this.connection.offReducer("UpdateFolderIcon", callback);
  }

  updateFolderName(folderId: number, name: string) {
    const __args = { folderId, name };
    let __writer = new BinaryWriter(1024);
    UpdateFolderName.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateFolderName", __argsBuffer, this.setCallReducerFlags.updateFolderNameFlags);
  }

  onUpdateFolderName(callback: (ctx: ReducerEventContext, folderId: number, name: string) => void) {
    this.connection.onReducer("UpdateFolderName", callback);
  }

  removeOnUpdateFolderName(callback: (ctx: ReducerEventContext, folderId: number, name: string) => void) {
    this.connection.offReducer("UpdateFolderName", callback);
  }

  updateGuest(nickname: string, selectedElementId: number, positionX: number, positionY: number) {
    const __args = { nickname, selectedElementId, positionX, positionY };
    let __writer = new BinaryWriter(1024);
    UpdateGuest.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateGuest", __argsBuffer, this.setCallReducerFlags.updateGuestFlags);
  }

  onUpdateGuest(callback: (ctx: ReducerEventContext, nickname: string, selectedElementId: number, positionX: number, positionY: number) => void) {
    this.connection.onReducer("UpdateGuest", callback);
  }

  removeOnUpdateGuest(callback: (ctx: ReducerEventContext, nickname: string, selectedElementId: number, positionX: number, positionY: number) => void) {
    this.connection.offReducer("UpdateGuest", callback);
  }

  updateGuestNickname(nickname: string) {
    const __args = { nickname };
    let __writer = new BinaryWriter(1024);
    UpdateGuestNickname.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateGuestNickname", __argsBuffer, this.setCallReducerFlags.updateGuestNicknameFlags);
  }

  onUpdateGuestNickname(callback: (ctx: ReducerEventContext, nickname: string) => void) {
    this.connection.onReducer("UpdateGuestNickname", callback);
  }

  removeOnUpdateGuestNickname(callback: (ctx: ReducerEventContext, nickname: string) => void) {
    this.connection.offReducer("UpdateGuestNickname", callback);
  }

  updateGuestPosition(positionX: number, positionY: number) {
    const __args = { positionX, positionY };
    let __writer = new BinaryWriter(1024);
    UpdateGuestPosition.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateGuestPosition", __argsBuffer, this.setCallReducerFlags.updateGuestPositionFlags);
  }

  onUpdateGuestPosition(callback: (ctx: ReducerEventContext, positionX: number, positionY: number) => void) {
    this.connection.onReducer("UpdateGuestPosition", callback);
  }

  removeOnUpdateGuestPosition(callback: (ctx: ReducerEventContext, positionX: number, positionY: number) => void) {
    this.connection.offReducer("UpdateGuestPosition", callback);
  }

  updateGuestSelectedElement(selectedElementId: number) {
    const __args = { selectedElementId };
    let __writer = new BinaryWriter(1024);
    UpdateGuestSelectedElement.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateGuestSelectedElement", __argsBuffer, this.setCallReducerFlags.updateGuestSelectedElementFlags);
  }

  onUpdateGuestSelectedElement(callback: (ctx: ReducerEventContext, selectedElementId: number) => void) {
    this.connection.onReducer("UpdateGuestSelectedElement", callback);
  }

  removeOnUpdateGuestSelectedElement(callback: (ctx: ReducerEventContext, selectedElementId: number) => void) {
    this.connection.offReducer("UpdateGuestSelectedElement", callback);
  }

  updateGuestSelectedLayout(selectedLayoutId: number) {
    const __args = { selectedLayoutId };
    let __writer = new BinaryWriter(1024);
    UpdateGuestSelectedLayout.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateGuestSelectedLayout", __argsBuffer, this.setCallReducerFlags.updateGuestSelectedLayoutFlags);
  }

  onUpdateGuestSelectedLayout(callback: (ctx: ReducerEventContext, selectedLayoutId: number) => void) {
    this.connection.onReducer("UpdateGuestSelectedLayout", callback);
  }

  removeOnUpdateGuestSelectedLayout(callback: (ctx: ReducerEventContext, selectedLayoutId: number) => void) {
    this.connection.offReducer("UpdateGuestSelectedLayout", callback);
  }

  updateImageElementDataStruct(elementId: number, imageElementData: ImageElementData) {
    const __args = { elementId, imageElementData };
    let __writer = new BinaryWriter(1024);
    UpdateImageElementDataStruct.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateImageElementDataStruct", __argsBuffer, this.setCallReducerFlags.updateImageElementDataStructFlags);
  }

  onUpdateImageElementDataStruct(callback: (ctx: ReducerEventContext, elementId: number, imageElementData: ImageElementData) => void) {
    this.connection.onReducer("UpdateImageElementDataStruct", callback);
  }

  removeOnUpdateImageElementDataStruct(callback: (ctx: ReducerEventContext, elementId: number, imageElementData: ImageElementData) => void) {
    this.connection.offReducer("UpdateImageElementDataStruct", callback);
  }

  updateImageElementHeight(elementId: number, height: number) {
    const __args = { elementId, height };
    let __writer = new BinaryWriter(1024);
    UpdateImageElementHeight.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateImageElementHeight", __argsBuffer, this.setCallReducerFlags.updateImageElementHeightFlags);
  }

  onUpdateImageElementHeight(callback: (ctx: ReducerEventContext, elementId: number, height: number) => void) {
    this.connection.onReducer("UpdateImageElementHeight", callback);
  }

  removeOnUpdateImageElementHeight(callback: (ctx: ReducerEventContext, elementId: number, height: number) => void) {
    this.connection.offReducer("UpdateImageElementHeight", callback);
  }

  updateImageElementSize(elementId: number, width: number, height: number) {
    const __args = { elementId, width, height };
    let __writer = new BinaryWriter(1024);
    UpdateImageElementSize.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateImageElementSize", __argsBuffer, this.setCallReducerFlags.updateImageElementSizeFlags);
  }

  onUpdateImageElementSize(callback: (ctx: ReducerEventContext, elementId: number, width: number, height: number) => void) {
    this.connection.onReducer("UpdateImageElementSize", callback);
  }

  removeOnUpdateImageElementSize(callback: (ctx: ReducerEventContext, elementId: number, width: number, height: number) => void) {
    this.connection.offReducer("UpdateImageElementSize", callback);
  }

  updateImageElementWidth(elementId: number, width: number) {
    const __args = { elementId, width };
    let __writer = new BinaryWriter(1024);
    UpdateImageElementWidth.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateImageElementWidth", __argsBuffer, this.setCallReducerFlags.updateImageElementWidthFlags);
  }

  onUpdateImageElementWidth(callback: (ctx: ReducerEventContext, elementId: number, width: number) => void) {
    this.connection.onReducer("UpdateImageElementWidth", callback);
  }

  removeOnUpdateImageElementWidth(callback: (ctx: ReducerEventContext, elementId: number, width: number) => void) {
    this.connection.offReducer("UpdateImageElementWidth", callback);
  }

  updateLayoutName(layoutId: number, name: string) {
    const __args = { layoutId, name };
    let __writer = new BinaryWriter(1024);
    UpdateLayoutName.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateLayoutName", __argsBuffer, this.setCallReducerFlags.updateLayoutNameFlags);
  }

  onUpdateLayoutName(callback: (ctx: ReducerEventContext, layoutId: number, name: string) => void) {
    this.connection.onReducer("UpdateLayoutName", callback);
  }

  removeOnUpdateLayoutName(callback: (ctx: ReducerEventContext, layoutId: number, name: string) => void) {
    this.connection.offReducer("UpdateLayoutName", callback);
  }

  updateTextElementColor(elementId: number, color: string) {
    const __args = { elementId, color };
    let __writer = new BinaryWriter(1024);
    UpdateTextElementColor.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateTextElementColor", __argsBuffer, this.setCallReducerFlags.updateTextElementColorFlags);
  }

  onUpdateTextElementColor(callback: (ctx: ReducerEventContext, elementId: number, color: string) => void) {
    this.connection.onReducer("UpdateTextElementColor", callback);
  }

  removeOnUpdateTextElementColor(callback: (ctx: ReducerEventContext, elementId: number, color: string) => void) {
    this.connection.offReducer("UpdateTextElementColor", callback);
  }

  updateTextElementFont(elementId: number, font: string) {
    const __args = { elementId, font };
    let __writer = new BinaryWriter(1024);
    UpdateTextElementFont.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateTextElementFont", __argsBuffer, this.setCallReducerFlags.updateTextElementFontFlags);
  }

  onUpdateTextElementFont(callback: (ctx: ReducerEventContext, elementId: number, font: string) => void) {
    this.connection.onReducer("UpdateTextElementFont", callback);
  }

  removeOnUpdateTextElementFont(callback: (ctx: ReducerEventContext, elementId: number, font: string) => void) {
    this.connection.offReducer("UpdateTextElementFont", callback);
  }

  updateTextElementShadow(elementId: number, css: string) {
    const __args = { elementId, css };
    let __writer = new BinaryWriter(1024);
    UpdateTextElementShadow.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateTextElementShadow", __argsBuffer, this.setCallReducerFlags.updateTextElementShadowFlags);
  }

  onUpdateTextElementShadow(callback: (ctx: ReducerEventContext, elementId: number, css: string) => void) {
    this.connection.onReducer("UpdateTextElementShadow", callback);
  }

  removeOnUpdateTextElementShadow(callback: (ctx: ReducerEventContext, elementId: number, css: string) => void) {
    this.connection.offReducer("UpdateTextElementShadow", callback);
  }

  updateTextElementSize(elementId: number, size: number) {
    const __args = { elementId, size };
    let __writer = new BinaryWriter(1024);
    UpdateTextElementSize.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateTextElementSize", __argsBuffer, this.setCallReducerFlags.updateTextElementSizeFlags);
  }

  onUpdateTextElementSize(callback: (ctx: ReducerEventContext, elementId: number, size: number) => void) {
    this.connection.onReducer("UpdateTextElementSize", callback);
  }

  removeOnUpdateTextElementSize(callback: (ctx: ReducerEventContext, elementId: number, size: number) => void) {
    this.connection.offReducer("UpdateTextElementSize", callback);
  }

  updateTextElementText(elementId: number, text: string) {
    const __args = { elementId, text };
    let __writer = new BinaryWriter(1024);
    UpdateTextElementText.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateTextElementText", __argsBuffer, this.setCallReducerFlags.updateTextElementTextFlags);
  }

  onUpdateTextElementText(callback: (ctx: ReducerEventContext, elementId: number, text: string) => void) {
    this.connection.onReducer("UpdateTextElementText", callback);
  }

  removeOnUpdateTextElementText(callback: (ctx: ReducerEventContext, elementId: number, text: string) => void) {
    this.connection.offReducer("UpdateTextElementText", callback);
  }

  updateWidgetElementDataId(elementId: number, elementDataId: number) {
    const __args = { elementId, elementDataId };
    let __writer = new BinaryWriter(1024);
    UpdateWidgetElementDataId.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateWidgetElementDataId", __argsBuffer, this.setCallReducerFlags.updateWidgetElementDataIdFlags);
  }

  onUpdateWidgetElementDataId(callback: (ctx: ReducerEventContext, elementId: number, elementDataId: number) => void) {
    this.connection.onReducer("UpdateWidgetElementDataId", callback);
  }

  removeOnUpdateWidgetElementDataId(callback: (ctx: ReducerEventContext, elementId: number, elementDataId: number) => void) {
    this.connection.offReducer("UpdateWidgetElementDataId", callback);
  }

  updateWidgetElementHeight(elementId: number, height: number) {
    const __args = { elementId, height };
    let __writer = new BinaryWriter(1024);
    UpdateWidgetElementHeight.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateWidgetElementHeight", __argsBuffer, this.setCallReducerFlags.updateWidgetElementHeightFlags);
  }

  onUpdateWidgetElementHeight(callback: (ctx: ReducerEventContext, elementId: number, height: number) => void) {
    this.connection.onReducer("UpdateWidgetElementHeight", callback);
  }

  removeOnUpdateWidgetElementHeight(callback: (ctx: ReducerEventContext, elementId: number, height: number) => void) {
    this.connection.offReducer("UpdateWidgetElementHeight", callback);
  }

  updateWidgetElementRawData(elementId: number, rawData: string) {
    const __args = { elementId, rawData };
    let __writer = new BinaryWriter(1024);
    UpdateWidgetElementRawData.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateWidgetElementRawData", __argsBuffer, this.setCallReducerFlags.updateWidgetElementRawDataFlags);
  }

  onUpdateWidgetElementRawData(callback: (ctx: ReducerEventContext, elementId: number, rawData: string) => void) {
    this.connection.onReducer("UpdateWidgetElementRawData", callback);
  }

  removeOnUpdateWidgetElementRawData(callback: (ctx: ReducerEventContext, elementId: number, rawData: string) => void) {
    this.connection.offReducer("UpdateWidgetElementRawData", callback);
  }

  updateWidgetElementSize(elementId: number, width: number, height: number) {
    const __args = { elementId, width, height };
    let __writer = new BinaryWriter(1024);
    UpdateWidgetElementSize.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateWidgetElementSize", __argsBuffer, this.setCallReducerFlags.updateWidgetElementSizeFlags);
  }

  onUpdateWidgetElementSize(callback: (ctx: ReducerEventContext, elementId: number, width: number, height: number) => void) {
    this.connection.onReducer("UpdateWidgetElementSize", callback);
  }

  removeOnUpdateWidgetElementSize(callback: (ctx: ReducerEventContext, elementId: number, width: number, height: number) => void) {
    this.connection.offReducer("UpdateWidgetElementSize", callback);
  }

  updateWidgetElementWidth(elementId: number, width: number) {
    const __args = { elementId, width };
    let __writer = new BinaryWriter(1024);
    UpdateWidgetElementWidth.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateWidgetElementWidth", __argsBuffer, this.setCallReducerFlags.updateWidgetElementWidthFlags);
  }

  onUpdateWidgetElementWidth(callback: (ctx: ReducerEventContext, elementId: number, width: number) => void) {
    this.connection.onReducer("UpdateWidgetElementWidth", callback);
  }

  removeOnUpdateWidgetElementWidth(callback: (ctx: ReducerEventContext, elementId: number, width: number) => void) {
    this.connection.offReducer("UpdateWidgetElementWidth", callback);
  }

}

export class SetReducerFlags {
  addElementFlags: CallReducerFlags = 'FullUpdate';
  addElement(flags: CallReducerFlags) {
    this.addElementFlags = flags;
  }

  addElementDataFlags: CallReducerFlags = 'FullUpdate';
  addElementData(flags: CallReducerFlags) {
    this.addElementDataFlags = flags;
  }

  addElementDataArrayFlags: CallReducerFlags = 'FullUpdate';
  addElementDataArray(flags: CallReducerFlags) {
    this.addElementDataArrayFlags = flags;
  }

  addElementDataArrayWithIdFlags: CallReducerFlags = 'FullUpdate';
  addElementDataArrayWithId(flags: CallReducerFlags) {
    this.addElementDataArrayWithIdFlags = flags;
  }

  addElementDataWithIdFlags: CallReducerFlags = 'FullUpdate';
  addElementDataWithId(flags: CallReducerFlags) {
    this.addElementDataWithIdFlags = flags;
  }

  addElementToLayoutFlags: CallReducerFlags = 'FullUpdate';
  addElementToLayout(flags: CallReducerFlags) {
    this.addElementToLayoutFlags = flags;
  }

  addFolderFlags: CallReducerFlags = 'FullUpdate';
  addFolder(flags: CallReducerFlags) {
    this.addFolderFlags = flags;
  }

  addLayoutFlags: CallReducerFlags = 'FullUpdate';
  addLayout(flags: CallReducerFlags) {
    this.addLayoutFlags = flags;
  }

  addLayoutWithIdFlags: CallReducerFlags = 'FullUpdate';
  addLayoutWithId(flags: CallReducerFlags) {
    this.addLayoutWithIdFlags = flags;
  }

  authenticateFlags: CallReducerFlags = 'FullUpdate';
  authenticate(flags: CallReducerFlags) {
    this.authenticateFlags = flags;
  }

  clearIdentityPermissionFlags: CallReducerFlags = 'FullUpdate';
  clearIdentityPermission(flags: CallReducerFlags) {
    this.clearIdentityPermissionFlags = flags;
  }

  completeOverlayCommandFlags: CallReducerFlags = 'FullUpdate';
  completeOverlayCommand(flags: CallReducerFlags) {
    this.completeOverlayCommandFlags = flags;
  }

  connectFlags: CallReducerFlags = 'FullUpdate';
  connect(flags: CallReducerFlags) {
    this.connectFlags = flags;
  }

  deleteAllElementDataFlags: CallReducerFlags = 'FullUpdate';
  deleteAllElementData(flags: CallReducerFlags) {
    this.deleteAllElementDataFlags = flags;
  }

  deleteAllElementsFlags: CallReducerFlags = 'FullUpdate';
  deleteAllElements(flags: CallReducerFlags) {
    this.deleteAllElementsFlags = flags;
  }

  deleteAllFoldersFlags: CallReducerFlags = 'FullUpdate';
  deleteAllFolders(flags: CallReducerFlags) {
    this.deleteAllFoldersFlags = flags;
  }

  deleteAllLayoutsFlags: CallReducerFlags = 'FullUpdate';
  deleteAllLayouts(flags: CallReducerFlags) {
    this.deleteAllLayoutsFlags = flags;
  }

  deleteElementFlags: CallReducerFlags = 'FullUpdate';
  deleteElement(flags: CallReducerFlags) {
    this.deleteElementFlags = flags;
  }

  deleteElementDataByIdFlags: CallReducerFlags = 'FullUpdate';
  deleteElementDataById(flags: CallReducerFlags) {
    this.deleteElementDataByIdFlags = flags;
  }

  deleteElementDataByNameFlags: CallReducerFlags = 'FullUpdate';
  deleteElementDataByName(flags: CallReducerFlags) {
    this.deleteElementDataByNameFlags = flags;
  }

  deleteFolderFlags: CallReducerFlags = 'FullUpdate';
  deleteFolder(flags: CallReducerFlags) {
    this.deleteFolderFlags = flags;
  }

  deleteLayoutFlags: CallReducerFlags = 'FullUpdate';
  deleteLayout(flags: CallReducerFlags) {
    this.deleteLayoutFlags = flags;
  }

  duplicateLayoutFlags: CallReducerFlags = 'FullUpdate';
  duplicateLayout(flags: CallReducerFlags) {
    this.duplicateLayoutFlags = flags;
  }

  importConfigFlags: CallReducerFlags = 'FullUpdate';
  importConfig(flags: CallReducerFlags) {
    this.importConfigFlags = flags;
  }

  importElementFlags: CallReducerFlags = 'FullUpdate';
  importElement(flags: CallReducerFlags) {
    this.importElementFlags = flags;
  }

  importElementDataFlags: CallReducerFlags = 'FullUpdate';
  importElementData(flags: CallReducerFlags) {
    this.importElementDataFlags = flags;
  }

  importLayoutFlags: CallReducerFlags = 'FullUpdate';
  importLayout(flags: CallReducerFlags) {
    this.importLayoutFlags = flags;
  }

  importPermissionFlags: CallReducerFlags = 'FullUpdate';
  importPermission(flags: CallReducerFlags) {
    this.importPermissionFlags = flags;
  }

  issueOverlayCommandFlags: CallReducerFlags = 'FullUpdate';
  issueOverlayCommand(flags: CallReducerFlags) {
    this.issueOverlayCommandFlags = flags;
  }

  keepAliveFlags: CallReducerFlags = 'FullUpdate';
  keepAlive(flags: CallReducerFlags) {
    this.keepAliveFlags = flags;
  }

  kickGuestFlags: CallReducerFlags = 'FullUpdate';
  kickGuest(flags: CallReducerFlags) {
    this.kickGuestFlags = flags;
  }

  kickSelfFlags: CallReducerFlags = 'FullUpdate';
  kickSelf(flags: CallReducerFlags) {
    this.kickSelfFlags = flags;
  }

  pingHeartbeatFlags: CallReducerFlags = 'FullUpdate';
  pingHeartbeat(flags: CallReducerFlags) {
    this.pingHeartbeatFlags = flags;
  }

  sendMessageFlags: CallReducerFlags = 'FullUpdate';
  sendMessage(flags: CallReducerFlags) {
    this.sendMessageFlags = flags;
  }

  setConfigFlags: CallReducerFlags = 'FullUpdate';
  setConfig(flags: CallReducerFlags) {
    this.setConfigFlags = flags;
  }

  setIdentityPermissionFlags: CallReducerFlags = 'FullUpdate';
  setIdentityPermission(flags: CallReducerFlags) {
    this.setIdentityPermissionFlags = flags;
  }

  setIdentityPermissionEditorFlags: CallReducerFlags = 'FullUpdate';
  setIdentityPermissionEditor(flags: CallReducerFlags) {
    this.setIdentityPermissionEditorFlags = flags;
  }

  setIdentityPermissionEditorByNameFlags: CallReducerFlags = 'FullUpdate';
  setIdentityPermissionEditorByName(flags: CallReducerFlags) {
    this.setIdentityPermissionEditorByNameFlags = flags;
  }

  setIdentityPermissionModeratorFlags: CallReducerFlags = 'FullUpdate';
  setIdentityPermissionModerator(flags: CallReducerFlags) {
    this.setIdentityPermissionModeratorFlags = flags;
  }

  setIdentityPermissionModeratorByNameFlags: CallReducerFlags = 'FullUpdate';
  setIdentityPermissionModeratorByName(flags: CallReducerFlags) {
    this.setIdentityPermissionModeratorByNameFlags = flags;
  }

  setLayoutActiveFlags: CallReducerFlags = 'FullUpdate';
  setLayoutActive(flags: CallReducerFlags) {
    this.setLayoutActiveFlags = flags;
  }

  updateAuthenticationKeyFlags: CallReducerFlags = 'FullUpdate';
  updateAuthenticationKey(flags: CallReducerFlags) {
    this.updateAuthenticationKeyFlags = flags;
  }

  updateConfigFlags: CallReducerFlags = 'FullUpdate';
  updateConfig(flags: CallReducerFlags) {
    this.updateConfigFlags = flags;
  }

  updateEditorGuidelinesFlags: CallReducerFlags = 'FullUpdate';
  updateEditorGuidelines(flags: CallReducerFlags) {
    this.updateEditorGuidelinesFlags = flags;
  }

  updateElementFlags: CallReducerFlags = 'FullUpdate';
  updateElement(flags: CallReducerFlags) {
    this.updateElementFlags = flags;
  }

  updateElementClipFlags: CallReducerFlags = 'FullUpdate';
  updateElementClip(flags: CallReducerFlags) {
    this.updateElementClipFlags = flags;
  }

  updateElementDataFlags: CallReducerFlags = 'FullUpdate';
  updateElementData(flags: CallReducerFlags) {
    this.updateElementDataFlags = flags;
  }

  updateElementDataDataFlags: CallReducerFlags = 'FullUpdate';
  updateElementDataData(flags: CallReducerFlags) {
    this.updateElementDataDataFlags = flags;
  }

  updateElementDataNameFlags: CallReducerFlags = 'FullUpdate';
  updateElementDataName(flags: CallReducerFlags) {
    this.updateElementDataNameFlags = flags;
  }

  updateElementDataSizeFlags: CallReducerFlags = 'FullUpdate';
  updateElementDataSize(flags: CallReducerFlags) {
    this.updateElementDataSizeFlags = flags;
  }

  updateElementFolderFlags: CallReducerFlags = 'FullUpdate';
  updateElementFolder(flags: CallReducerFlags) {
    this.updateElementFolderFlags = flags;
  }

  updateElementLayoutFlags: CallReducerFlags = 'FullUpdate';
  updateElementLayout(flags: CallReducerFlags) {
    this.updateElementLayoutFlags = flags;
  }

  updateElementLockedFlags: CallReducerFlags = 'FullUpdate';
  updateElementLocked(flags: CallReducerFlags) {
    this.updateElementLockedFlags = flags;
  }

  updateElementStructFlags: CallReducerFlags = 'FullUpdate';
  updateElementStruct(flags: CallReducerFlags) {
    this.updateElementStructFlags = flags;
  }

  updateElementTransformFlags: CallReducerFlags = 'FullUpdate';
  updateElementTransform(flags: CallReducerFlags) {
    this.updateElementTransformFlags = flags;
  }

  updateElementTransparencyFlags: CallReducerFlags = 'FullUpdate';
  updateElementTransparency(flags: CallReducerFlags) {
    this.updateElementTransparencyFlags = flags;
  }

  updateFolderIconFlags: CallReducerFlags = 'FullUpdate';
  updateFolderIcon(flags: CallReducerFlags) {
    this.updateFolderIconFlags = flags;
  }

  updateFolderNameFlags: CallReducerFlags = 'FullUpdate';
  updateFolderName(flags: CallReducerFlags) {
    this.updateFolderNameFlags = flags;
  }

  updateGuestFlags: CallReducerFlags = 'FullUpdate';
  updateGuest(flags: CallReducerFlags) {
    this.updateGuestFlags = flags;
  }

  updateGuestNicknameFlags: CallReducerFlags = 'FullUpdate';
  updateGuestNickname(flags: CallReducerFlags) {
    this.updateGuestNicknameFlags = flags;
  }

  updateGuestPositionFlags: CallReducerFlags = 'FullUpdate';
  updateGuestPosition(flags: CallReducerFlags) {
    this.updateGuestPositionFlags = flags;
  }

  updateGuestSelectedElementFlags: CallReducerFlags = 'FullUpdate';
  updateGuestSelectedElement(flags: CallReducerFlags) {
    this.updateGuestSelectedElementFlags = flags;
  }

  updateGuestSelectedLayoutFlags: CallReducerFlags = 'FullUpdate';
  updateGuestSelectedLayout(flags: CallReducerFlags) {
    this.updateGuestSelectedLayoutFlags = flags;
  }

  updateImageElementDataStructFlags: CallReducerFlags = 'FullUpdate';
  updateImageElementDataStruct(flags: CallReducerFlags) {
    this.updateImageElementDataStructFlags = flags;
  }

  updateImageElementHeightFlags: CallReducerFlags = 'FullUpdate';
  updateImageElementHeight(flags: CallReducerFlags) {
    this.updateImageElementHeightFlags = flags;
  }

  updateImageElementSizeFlags: CallReducerFlags = 'FullUpdate';
  updateImageElementSize(flags: CallReducerFlags) {
    this.updateImageElementSizeFlags = flags;
  }

  updateImageElementWidthFlags: CallReducerFlags = 'FullUpdate';
  updateImageElementWidth(flags: CallReducerFlags) {
    this.updateImageElementWidthFlags = flags;
  }

  updateLayoutNameFlags: CallReducerFlags = 'FullUpdate';
  updateLayoutName(flags: CallReducerFlags) {
    this.updateLayoutNameFlags = flags;
  }

  updateTextElementColorFlags: CallReducerFlags = 'FullUpdate';
  updateTextElementColor(flags: CallReducerFlags) {
    this.updateTextElementColorFlags = flags;
  }

  updateTextElementFontFlags: CallReducerFlags = 'FullUpdate';
  updateTextElementFont(flags: CallReducerFlags) {
    this.updateTextElementFontFlags = flags;
  }

  updateTextElementShadowFlags: CallReducerFlags = 'FullUpdate';
  updateTextElementShadow(flags: CallReducerFlags) {
    this.updateTextElementShadowFlags = flags;
  }

  updateTextElementSizeFlags: CallReducerFlags = 'FullUpdate';
  updateTextElementSize(flags: CallReducerFlags) {
    this.updateTextElementSizeFlags = flags;
  }

  updateTextElementTextFlags: CallReducerFlags = 'FullUpdate';
  updateTextElementText(flags: CallReducerFlags) {
    this.updateTextElementTextFlags = flags;
  }

  updateWidgetElementDataIdFlags: CallReducerFlags = 'FullUpdate';
  updateWidgetElementDataId(flags: CallReducerFlags) {
    this.updateWidgetElementDataIdFlags = flags;
  }

  updateWidgetElementHeightFlags: CallReducerFlags = 'FullUpdate';
  updateWidgetElementHeight(flags: CallReducerFlags) {
    this.updateWidgetElementHeightFlags = flags;
  }

  updateWidgetElementRawDataFlags: CallReducerFlags = 'FullUpdate';
  updateWidgetElementRawData(flags: CallReducerFlags) {
    this.updateWidgetElementRawDataFlags = flags;
  }

  updateWidgetElementSizeFlags: CallReducerFlags = 'FullUpdate';
  updateWidgetElementSize(flags: CallReducerFlags) {
    this.updateWidgetElementSizeFlags = flags;
  }

  updateWidgetElementWidthFlags: CallReducerFlags = 'FullUpdate';
  updateWidgetElementWidth(flags: CallReducerFlags) {
    this.updateWidgetElementWidthFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get auditLog(): AuditLogTableHandle {
    return new AuditLogTableHandle(this.connection.clientCache.getOrCreateTable<AuditLog>(REMOTE_MODULE.tables.AuditLog));
  }

  get authenticationKey(): AuthenticationKeyTableHandle {
    return new AuthenticationKeyTableHandle(this.connection.clientCache.getOrCreateTable<AuthenticationKey>(REMOTE_MODULE.tables.AuthenticationKey));
  }

  get config(): ConfigTableHandle {
    return new ConfigTableHandle(this.connection.clientCache.getOrCreateTable<Config>(REMOTE_MODULE.tables.Config));
  }

  get elementData(): ElementDataTableHandle {
    return new ElementDataTableHandle(this.connection.clientCache.getOrCreateTable<ElementData>(REMOTE_MODULE.tables.ElementData));
  }

  get elements(): ElementsTableHandle {
    return new ElementsTableHandle(this.connection.clientCache.getOrCreateTable<Elements>(REMOTE_MODULE.tables.Elements));
  }

  get folders(): FoldersTableHandle {
    return new FoldersTableHandle(this.connection.clientCache.getOrCreateTable<Folders>(REMOTE_MODULE.tables.Folders));
  }

  get guests(): GuestsTableHandle {
    return new GuestsTableHandle(this.connection.clientCache.getOrCreateTable<Guests>(REMOTE_MODULE.tables.Guests));
  }

  get heartbeat(): HeartbeatTableHandle {
    return new HeartbeatTableHandle(this.connection.clientCache.getOrCreateTable<Heartbeat>(REMOTE_MODULE.tables.Heartbeat));
  }

  get keepAliveWorker(): KeepAliveWorkerTableHandle {
    return new KeepAliveWorkerTableHandle(this.connection.clientCache.getOrCreateTable<KeepAliveWorker>(REMOTE_MODULE.tables.KeepAliveWorker));
  }

  get layouts(): LayoutsTableHandle {
    return new LayoutsTableHandle(this.connection.clientCache.getOrCreateTable<Layouts>(REMOTE_MODULE.tables.Layouts));
  }

  get overlayCommand(): OverlayCommandTableHandle {
    return new OverlayCommandTableHandle(this.connection.clientCache.getOrCreateTable<OverlayCommand>(REMOTE_MODULE.tables.OverlayCommand));
  }

  get permissions(): PermissionsTableHandle {
    return new PermissionsTableHandle(this.connection.clientCache.getOrCreateTable<Permissions>(REMOTE_MODULE.tables.Permissions));
  }

  get zIndex(): ZIndexTableHandle {
    return new ZIndexTableHandle(this.connection.clientCache.getOrCreateTable<ZIndex>(REMOTE_MODULE.tables.ZIndex));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
